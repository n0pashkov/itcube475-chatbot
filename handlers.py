import re
from aiogram import Router, F
from aiogram.filters import Command, StateFilter, ChatMemberUpdatedFilter, IS_MEMBER, IS_NOT_MEMBER
from aiogram.types import Message, CallbackQuery, ChatMemberUpdated
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from database import db
from keyboards import (
    get_main_keyboard, get_schedule_directions_keyboard,
    get_direction_days_keyboard, get_back_to_directions_keyboard,
    get_admin_management_keyboard, get_cancel_keyboard, get_cancel_inline_keyboard,
    get_notification_settings_keyboard, get_back_to_notification_settings_keyboard,
    get_notification_chat_actions_keyboard, get_directions_keyboard,
    get_teacher_management_keyboard, get_back_to_teacher_management_keyboard,
    get_directions_list_keyboard, get_direction_teachers_keyboard, get_send_feedback_keyboard
)
from schedule_parser import schedule_parser
from chat_handler import ChatType, ChatBehavior
from enhanced_keyboards import get_keyboard_for_chat_type, get_admin_keyboard, get_teacher_keyboard

router = Router()

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
async def safe_edit_message(message, text, **kwargs):
    """
    –ë–µ–∑–æ–ø–∞—Å–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è - –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–µ
    """
    try:
        await message.edit_text(text, **kwargs)
        return True
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        try:
            await message.answer(text, **kwargs)
            return False
        except Exception as e2:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e2}")
            return False

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class AdminStates(StatesGroup):
    waiting_for_admin_id = State()
    waiting_for_remove_admin_id = State()

class FeedbackStates(StatesGroup):
    waiting_for_direction = State()
    waiting_for_message = State()
    waiting_for_attachments = State()

class NotificationStates(StatesGroup):
    waiting_for_chat_id = State()

class TeacherStates(StatesGroup):
    waiting_for_teacher_id = State()
    waiting_for_remove_teacher_id = State()
    waiting_for_teacher_assignment = State()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–∞ –≤ —á–∞—Ç/–≥—Ä—É–ø–ø—É
@router.my_chat_member(ChatMemberUpdatedFilter(member_status_changed=IS_NOT_MEMBER >> IS_MEMBER))
async def bot_added_to_chat(chat_member: ChatMemberUpdated):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–∞ –≤ —á–∞—Ç –∏–ª–∏ –≥—Ä—É–ø–ø—É"""
    chat = chat_member.chat
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ –ª–∏—á–Ω—ã–π —á–∞—Ç
    if chat.type == 'private':
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —á–∞—Ç–µ
    chat_title = chat.title or "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"
    chat_type_ru = {
        'group': '–ì—Ä—É–ø–ø–∞',
        'supergroup': '–°—É–ø–µ—Ä–≥—Ä—É–ø–ø–∞', 
        'channel': '–ö–∞–Ω–∞–ª'
    }.get(chat.type, chat.type)
    
    welcome_text = (
        f"üëã –ü—Ä–∏–≤–µ—Ç! –Ø –¥–æ–±–∞–≤–ª–µ–Ω –≤ {chat_type_ru.lower()}!\n\n"
        f"üìã *–ù–∞–∑–≤–∞–Ω–∏–µ:* {chat_title}\n"
        f"üÜî *ID —á–∞—Ç–∞:* `{chat.id}`\n"
        f"üì± *–¢–∏–ø:* {chat_type_ru}\n\n"
        f"ü§ñ –Ø –±–æ—Ç IT-Cube –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º –∏ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑—å—é.\n\n"
        f"üì¢ *–î–ª—è –∞–¥–º–∏–Ω–æ–≤:* –í—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —ç—Ç–æ—Ç —á–∞—Ç –≤ —Å–ø–∏—Å–æ–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ–± –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏.\n"
        f"–°–∫–æ–ø–∏—Ä—É–π—Ç–µ ID —á–∞—Ç–∞: `{chat.id}` –∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.\n\n"
        f"üí° *–ö–æ–º–∞–Ω–¥—ã:*\n"
        f"‚Ä¢ `/chatid` - –ø–æ–∫–∞–∑–∞—Ç—å ID —ç—Ç–æ–≥–æ —á–∞—Ç–∞\n"
        f"‚Ä¢ `/start` - –ø–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
        f"‚Ä¢ `/menu` - –ø–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
    )
    
    try:
        await chat_member.bot.send_message(
            chat.id, 
            welcome_text, 
            parse_mode="Markdown"
        )
    except Exception:
        # –ë–æ—Ç –º–æ–∂–µ—Ç –Ω–µ –∏–º–µ—Ç—å –ø—Ä–∞–≤ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π
        pass

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è ID —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Ç–∞
@router.message(Command("chatid"))
async def show_chat_id(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å ID —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Ç–∞"""
    chat = message.chat
    
    # –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ç–æ–ø–∏–∫–æ–≤ (—Ñ–æ—Ä—É–º–æ–≤)
    message_thread_id = getattr(message, 'message_thread_id', None)
    
    if chat.type == 'private':
        text = (
            f"üí¨ *–õ–∏—á–Ω—ã–π —á–∞—Ç*\n\n"
            f"üÜî *–í–∞—à ID:* `{message.from_user.id}`\n"
            f"üÜî *ID —á–∞—Ç–∞:* `{chat.id}`\n\n"
            f"üí° –≠—Ç–æ –≤–∞—à –ª–∏—á–Ω—ã–π —á–∞—Ç —Å –±–æ—Ç–æ–º."
        )
    else:
        chat_title = chat.title or "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"
        chat_type_ru = {
            'group': '–ì—Ä—É–ø–ø–∞',
            'supergroup': '–°—É–ø–µ—Ä–≥—Ä—É–ø–ø–∞',
            'channel': '–ö–∞–Ω–∞–ª'
        }.get(chat.type, chat.type)
        
        topic_info = ""
        if message_thread_id:
            topic_info = f"üìç *ID —Ç–æ–ø–∏–∫–∞:* `{message_thread_id}`\n"
        
        text = (
            f"üìã *{chat_type_ru}: {chat_title}*\n\n"
            f"üÜî *ID —á–∞—Ç–∞:* `{chat.id}`\n"
            f"{topic_info}"
            f"üì± *–¢–∏–ø:* {chat_type_ru}\n\n"
            f"üì¢ *–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:*\n"
            f"–°–∫–æ–ø–∏—Ä—É–π—Ç–µ ID: `{chat.id}`\n"
            f"–ò –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ –±–æ—Ç–∞."
        )
    
    # message.reply() –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç message_thread_id –∏–∑ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    await message.reply(text, parse_mode="Markdown")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start –≤ –≥—Ä—É–ø–ø–∞—Ö (–ø–æ–∫–∞–∂–µ—Ç ID)
@router.message(Command("start"), F.chat.type.in_({"group", "supergroup"}))
async def cmd_start_in_group(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start –≤ –≥—Ä—É–ø–ø–∞—Ö - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º ID —á–∞—Ç–∞"""
    chat = message.chat
    chat_title = chat.title or "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"
    chat_type_ru = {
        'group': '–ì—Ä—É–ø–ø–∞',
        'supergroup': '–°—É–ø–µ—Ä–≥—Ä—É–ø–ø–∞'
    }.get(chat.type, chat.type)
    
    # –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ç–æ–ø–∏–∫–æ–≤ (—Ñ–æ—Ä—É–º–æ–≤)
    message_thread_id = getattr(message, 'message_thread_id', None)
    topic_info = ""
    if message_thread_id:
        topic_info = f"üìç *–¢–æ–ø–∏–∫ ID:* `{message_thread_id}`\n"
    
    text = (
        f"üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç IT-Cube!\n\n"
        f"üìã *{chat_type_ru}: {chat_title}*\n"
        f"üÜî *ID —á–∞—Ç–∞:* `{chat.id}`\n"
        f"{topic_info}"
        f"ü§ñ –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:\n"
        f"‚Ä¢ üìÖ –ü—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è IT-Cube\n"
        f"‚Ä¢ üí¨ –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π\n"
        f"‚Ä¢ üì¢ –ü–æ–ª—É—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–¥–ª—è –∞–¥–º–∏–Ω–æ–≤)\n\n"
        f"üí° *–ü–æ–ª–µ–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n"
        f"‚Ä¢ `/chatid` - –ø–æ–∫–∞–∑–∞—Ç—å ID —ç—Ç–æ–≥–æ —á–∞—Ç–∞\n"
        f"‚Ä¢ `/start` - –ø–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
        f"‚Ä¢ `/menu` - –ø–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n\n"
        f"üì¢ *–î–ª—è –∞–¥–º–∏–Ω–æ–≤:* –°–∫–æ–ø–∏—Ä—É–π—Ç–µ ID `{chat.id}` —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —ç—Ç–æ—Ç —á–∞—Ç –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π."
    )
    
    # message.reply() –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç message_thread_id –∏–∑ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    await message.reply(text, parse_mode="Markdown")

# –ö–æ–º–∞–Ω–¥–∞ /start (–≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö)
@router.message(Command("start"), F.chat.type == "private")
async def cmd_start_private(message: Message):
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —á–∞—Ç–∞ –∏ —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    chat_type = await ChatBehavior.determine_chat_type(message)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –µ—Å–ª–∏ –æ–Ω –∞–¥–º–∏–Ω –∏–ª–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å
    if chat_type in [ChatType.PRIVATE_ADMIN, ChatType.PRIVATE_TEACHER]:
        await db.update_admin_info(
            message.from_user.id,
            message.from_user.username,
            message.from_user.first_name
        )
    
    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ç–∏–ø–∞ —á–∞—Ç–∞
    welcome_text = ChatBehavior.get_welcome_message(
        chat_type,
        message.from_user.first_name
    )
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = get_keyboard_for_chat_type(chat_type, message.from_user.id, None)
    
    await message.answer(welcome_text, parse_mode="Markdown", reply_markup=keyboard)

    # –ö–æ–º–∞–Ω–¥–∞ /menu (–≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö)
@router.message(Command("menu"), F.chat.type == "private")
async def cmd_menu_private(message: Message):
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —á–∞—Ç–∞ –∏ —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    chat_type = await ChatBehavior.determine_chat_type(message)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –µ—Å–ª–∏ –æ–Ω –∞–¥–º–∏–Ω –∏–ª–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å
    if chat_type in [ChatType.PRIVATE_ADMIN, ChatType.PRIVATE_TEACHER]:
        await db.update_admin_info(
            message.from_user.id,
            message.from_user.username,
            message.from_user.first_name
        )
    
    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ç–∏–ø–∞ —á–∞—Ç–∞
    welcome_text = ChatBehavior.get_welcome_message(
        chat_type,
        message.from_user.first_name
    )
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = get_keyboard_for_chat_type(chat_type, message.from_user.id, None)
    
    await message.answer(welcome_text, parse_mode="Markdown", reply_markup=keyboard)

# –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ
@router.message(F.text == "üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ")
async def show_schedule_menu(message: Message):
    await message.answer(
        "üìÖ *–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è:*",
        parse_mode="Markdown",
        reply_markup=get_schedule_directions_keyboard()
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
@router.callback_query(F.data.startswith("dir:"))
async def show_direction_schedule(callback: CallbackQuery):
    direction_idx = int(callback.data.split(":", 1)[1])
    directions = schedule_parser.get_directions()
    
    if direction_idx >= len(directions):
        await callback.answer("‚ùå –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
        return
    
    direction = directions[direction_idx]
    info = schedule_parser.get_direction_info(direction)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏
    text = f"üìö *{direction}*\n\n"
    text += f"üë®‚Äçüè´ *–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å:* {info.get('–ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
    text += f"üè¢ *–ö–∞–±–∏–Ω–µ—Ç:* {info.get('–∫–∞–±–∏–Ω–µ—Ç', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n\n"
    text += "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    
    await callback.message.edit_text(
        text,
        parse_mode="Markdown",
        reply_markup=get_direction_days_keyboard(direction_idx)
    )
    await callback.answer()

# –ü–æ–ª–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
@router.callback_query(F.data.startswith("full:"))
async def show_full_schedule(callback: CallbackQuery):
    direction_idx = int(callback.data.split(":", 1)[1])
    directions = schedule_parser.get_directions()
    
    if direction_idx >= len(directions):
        await callback.answer("‚ùå –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
        return
    
    direction = directions[direction_idx]
    schedule_text = schedule_parser.format_direction_schedule(direction)
    
    await callback.message.edit_text(
        schedule_text,
        parse_mode="Markdown",
        reply_markup=get_back_to_directions_keyboard()
    )
    await callback.answer()

# –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –¥–µ–Ω—å
@router.callback_query(F.data.startswith("day:"))
async def show_day_schedule(callback: CallbackQuery):
    parts = callback.data.split(":", 2)
    direction_idx = int(parts[1])
    short_day = parts[2]
    
    # –ú–∞–ø–ø–∏–Ω–≥ –∫–æ—Ä–æ—Ç–∫–∏—Ö –Ω–∞–∑–≤–∞–Ω–∏–π –¥–Ω–µ–π –æ–±—Ä–∞—Ç–Ω–æ –∫ –ø–æ–ª–Ω—ã–º
    day_reverse_mapping = {
        '–ø–Ω': '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–≤—Ç': '–í—Ç–æ—Ä–Ω–∏–∫', '—Å—Ä': '–°—Ä–µ–¥–∞',
        '—á—Ç': '–ß–µ—Ç–≤–µ—Ä–≥', '–ø—Ç': '–ü—è—Ç–Ω–∏—Ü–∞', '—Å–±': '–°—É–±–±–æ—Ç–∞'
    }
    day = day_reverse_mapping.get(short_day, short_day)
    
    directions = schedule_parser.get_directions()
    if direction_idx >= len(directions):
        await callback.answer("‚ùå –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
        return
    
    direction = directions[direction_idx]
    info = schedule_parser.get_direction_info(direction)
    
    if day in info.get('–¥–Ω–∏', {}):
        schedule = info['–¥–Ω–∏'][day]
        text = f"üìö *{direction}*\n"
        text += f"üë®‚Äçüè´ *–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å:* {info['–ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å']}\n"
        text += f"üè¢ *–ö–∞–±–∏–Ω–µ—Ç:* {info['–∫–∞–±–∏–Ω–µ—Ç']}\n\n"
        text += f"üìÖ *{day}:*\n"
        for group_schedule in schedule:
            text += f"‚Ä¢ {group_schedule}\n"
    else:
        text = f"–í {day} –∑–∞–Ω—è—Ç–∏–π –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é '{direction}' –Ω–µ—Ç"
    
    await callback.message.edit_text(
        text,
        parse_mode="Markdown",
        reply_markup=get_back_to_directions_keyboard()
    )
    await callback.answer()

# –ù–∞–∑–∞–¥ –∫ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º
@router.callback_query(F.data == "back_to_directions")
async def back_to_directions(callback: CallbackQuery):
    await callback.message.edit_text(
        "üìÖ *–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è:*",
        parse_mode="Markdown",
        reply_markup=get_schedule_directions_keyboard()
    )
    await callback.answer()

# –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å
@router.message(F.text == "üí¨ –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å")
async def feedback_menu(message: Message, state: FSMContext):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–±–æ—á–∏–µ —á–∞—Å—ã –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
    is_available, error_message = await db.is_feedback_available_now()
    
    if not is_available:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ä–∞–±–æ—á–∏–µ —á–∞—Å—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        working_hours = await db.get_working_hours()
        days = ["–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±", "–í—Å"]
        
        if working_hours:
            hours_text = "üïê *–†–∞–±–æ—á–∏–µ —á–∞—Å—ã –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏:*\n\n"
            for day_num, start_time, end_time, is_active in working_hours:
                if is_active:
                    day_name = days[day_num]
                    hours_text += f"‚Ä¢ {day_name}: {start_time} - {end_time}\n"
        else:
            hours_text = "üïê –†–∞–±–æ—á–∏–µ —á–∞—Å—ã –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã"
        
        await message.answer(
            f"‚ùå *–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞*\n\n"
            f"‚è∞ {error_message}\n\n"
            f"{hours_text}\n\n"
            f"üí° –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è.",
            parse_mode="Markdown"
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–∫—Ç–∏–≤–Ω–∞—è –∑–∞—è–≤–∫–∞
    has_active = await db.has_active_request(message.from_user.id)
    
    if has_active:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–∫—Ç–∏–≤–Ω–æ–π –∑–∞—è–≤–∫–µ
        active_request = await db.get_active_request(message.from_user.id)
        if active_request:
            request_id, request_text, created_at = active_request
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
            from datetime import datetime
            created_date = datetime.fromisoformat(created_at).strftime("%d.%m.%Y %H:%M")
            
            await message.answer(
                "‚ö†Ô∏è *–£ –≤–∞—Å –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏*\n\n"
                f"üìù *–ó–∞—è–≤–∫–∞ #{request_id}*\n"
                f"üìÖ *–°–æ–∑–¥–∞–Ω–∞:* {created_date}\n\n"
                f"üí¨ *–¢–µ–∫—Å—Ç –∑–∞—è–≤–∫–∏:*\n{request_text}\n\n"
                "‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É, –ø–æ–∫–∞ —Ç–µ–∫—É—â–∞—è –∞–∫—Ç–∏–≤–Ω–∞.\n"
                "‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–∂–¥–∏—Ç–µ—Å—å –æ—Ç–≤–µ—Ç–∞ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏.\n\n"
                "üí° –ü–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –≤—ã —Å–º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É.",
                parse_mode="Markdown"
            )
            return
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π
    directions = await db.get_all_directions()
    
    if not directions:
        await message.answer(
            "‚ùå *–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã*\n\n"
            "–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏.\n"
            "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
            parse_mode="Markdown"
        )
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏
    from keyboards import get_directions_keyboard
    
    await message.answer(
        "üí¨ *–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏*\n\n"
        "üìö *–®–∞–≥ 1:* –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—è –≤–∞—à–µ–π –∑–∞—è–≤–∫–∏:\n\n"
        "üëë *–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è* - –¥–ª—è –æ–±—â–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤, –∂–∞–ª–æ–± –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π\n"
        "üìö *–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è* - –¥–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –ø—Ä–µ–¥–º–µ—Ç–∞–º\n\n"
        "üí° –ó–∞—è–≤–∫–∏ –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è–º –∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏,\n"
        "–∑–∞—è–≤–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏ - —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏.",
        parse_mode="Markdown",
        reply_markup=get_directions_keyboard(directions)
    )
    await state.set_state(FeedbackStates.waiting_for_direction)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –∑–∞—è–≤–∫–∏
@router.callback_query(F.data.startswith("select_direction:"))
async def select_direction_for_feedback(callback: CallbackQuery, state: FSMContext):
    direction_value = callback.data.split(":", 1)[1]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–±—Ä–∞–Ω–∞ –ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è
    if direction_value == "admin":
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏
        await state.update_data(direction_id="admin")
        direction_name = "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è"
        
        await callback.message.edit_text(
            f"üí¨ *–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏*\n\n"
            f"üëë *–í—ã–±—Ä–∞–Ω–æ:* {direction_name}\n\n"
            f"‚úçÔ∏è *–®–∞–≥ 2:* –û–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—É:\n\n"
            f"üìù *–ù–∞–ø—Ä–∏–º–µ—Ä:*\n"
            f"‚Ä¢ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã\n"
            f"‚Ä¢ –ñ–∞–ª–æ–±—ã –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è\n"
            f"‚Ä¢ –û–±—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã –ø–æ –æ–±—É—á–µ–Ω–∏—é\n"
            f"‚Ä¢ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞\n\n"
            f"üíå –ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞—è–≤–∫–∏ —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.\n"
            f"üìé –í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–æ—Ç–æ, –¥–æ–∫—É–º–µ–Ω—Ç—ã –∏–ª–∏ –¥—Ä—É–≥–∏–µ —Ñ–∞–π–ª—ã.",
            parse_mode="Markdown",
            reply_markup=get_cancel_inline_keyboard()
        )
    else:
        # –û–±—ã—á–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
        direction_id = int(direction_value)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(direction_id=direction_id)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏
        direction = await db.get_direction_by_id(direction_id)
        if not direction:
            await callback.answer("‚ùå –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
            return
        
        direction_name = direction[1]
        
        await callback.message.edit_text(
            f"üí¨ *–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏*\n\n"
            f"üìö *–í—ã–±—Ä–∞–Ω–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:* {direction_name}\n\n"
            f"‚úçÔ∏è *–®–∞–≥ 2:* –û–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—É:\n\n"
            f"üìù *–ù–∞–ø—Ä–∏–º–µ—Ä:*\n"
            f"‚Ä¢ –í–æ–ø—Ä–æ—Å –ø–æ –º–∞—Ç–µ—Ä–∏–∞–ª—É —É—Ä–æ–∫–∞\n"
            f"‚Ä¢ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–±–ª–µ–º–∞\n"
            f"‚Ä¢ –ó–∞–ø—Ä–æ—Å –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é\n"
            f"‚Ä¢ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é\n\n"
            f"üíå –ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞—è–≤–∫–∏ —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.\n"
            f"üìé –í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–æ—Ç–æ, –¥–æ–∫—É–º–µ–Ω—Ç—ã –∏–ª–∏ –¥—Ä—É–≥–∏–µ —Ñ–∞–π–ª—ã.",
            parse_mode="Markdown",
            reply_markup=get_cancel_inline_keyboard()
        )
    
    await state.set_state(FeedbackStates.waiting_for_message)
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏
@router.callback_query(F.data == "cancel_feedback")
async def cancel_feedback(callback: CallbackQuery, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º
    data = await state.get_data()
    last_message_id = data.get('last_attachment_message_id')
    
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏–π (–µ—Å–ª–∏ –µ—Å—Ç—å)
    if last_message_id:
        try:
            await callback.bot.delete_message(callback.message.chat.id, last_message_id)
        except:
            pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è
    
    is_admin = await db.is_admin(callback.from_user.id)
    is_teacher = await db.is_teacher(callback.from_user.id)
    
    if is_admin:
        keyboard = get_admin_keyboard()
    elif is_teacher:
        keyboard = get_teacher_keyboard()
    else:
        keyboard = get_main_keyboard()
    
    await callback.message.edit_text("‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    await state.clear()
    await callback.answer()
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await callback.message.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.", reply_markup=keyboard)

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∑–∞—è–≤–∫–∏
@router.message(StateFilter(FeedbackStates.waiting_for_message))
async def receive_feedback_text(message: Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        is_admin = await db.is_admin(message.from_user.id)
        is_teacher = await db.is_teacher(message.from_user.id)
        
        if is_admin:
            keyboard = get_admin_keyboard()
        elif is_teacher:
            keyboard = get_teacher_keyboard()
        else:
            keyboard = get_main_keyboard()
        
        await message.answer("–û—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=keyboard)
        await state.clear()
        return
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–∫—Ç–∏–≤–Ω—É—é –∑–∞—è–≤–∫—É (–∑–∞—â–∏—Ç–∞ –æ—Ç —Å–ø–∞–º–∞)
    has_active = await db.has_active_request(message.from_user.id)
    if has_active:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        is_admin = await db.is_admin(message.from_user.id)
        is_teacher = await db.is_teacher(message.from_user.id)
        
        if is_admin:
            active_keyboard = get_admin_keyboard()
        elif is_teacher:
            active_keyboard = get_teacher_keyboard()
        else:
            active_keyboard = get_main_keyboard()
        
        await message.answer(
            "‚ö†Ô∏è –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–∂–¥–∏—Ç–µ—Å—å –æ—Ç–≤–µ—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏.",
            reply_markup=active_keyboard
        )
        await state.clear()
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if not message.text:
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞—è–≤–∫–∏.\n"
            "–§–∞–π–ª—ã –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–º —à–∞–≥–µ.",
            reply_markup=get_cancel_inline_keyboard()
        )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    direction_id = data.get('direction_id')
    
    if not direction_id:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        is_admin = await db.is_admin(message.from_user.id)
        is_teacher = await db.is_teacher(message.from_user.id)
        
        if is_admin:
            error_keyboard = get_admin_keyboard()
        elif is_teacher:
            error_keyboard = get_teacher_keyboard()
        else:
            error_keyboard = get_main_keyboard()
        
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞: –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            reply_markup=error_keyboard
        )
        await state.clear()
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç –∑–∞—è–≤–∫–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(feedback_text=message.text)
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —ç—Ç–∞–ø—É –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤
    direction_name = "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è" if direction_id == "admin" else (await db.get_direction_by_id(direction_id))[1]
    
    await message.answer(
        f"üí¨ *–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏*\n\n"
        f"üìö *–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:* {direction_name}\n"
        f"‚úÖ *–¢–µ–∫—Å—Ç –∑–∞—è–≤–∫–∏ –ø–æ–ª—É—á–µ–Ω*\n\n"
        f"üìé *–®–∞–≥ 3 (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ):* –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–∞–π–ª—ã\n\n"
        f"–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å:\n"
        f"‚Ä¢ üì∑ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏\n"
        f"‚Ä¢ üìÑ –î–æ–∫—É–º–µ–Ω—Ç—ã (PDF, DOC, TXT –∏ –¥—Ä.)\n"
        f"‚Ä¢ üéµ –ê—É–¥–∏–æ—Ñ–∞–π–ª—ã\n"
        f"‚Ä¢ üé¨ –í–∏–¥–µ–æ—Ñ–∞–π–ª—ã\n\n"
        f"üì§ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª—ã –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ *\"–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É\"* –µ—Å–ª–∏ —Ñ–∞–π–ª—ã –Ω–µ –Ω—É–∂–Ω—ã.",
        parse_mode="Markdown",
        reply_markup=get_send_feedback_keyboard()
    )
    
    await state.set_state(FeedbackStates.waiting_for_attachments)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏–π –∫ –∑–∞—è–≤–∫–µ
@router.message(StateFilter(FeedbackStates.waiting_for_attachments))
async def handle_attachments(message: Message, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    attachments = data.get('attachments', [])
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã –º–µ–¥–∏–∞
    file_info = None
    file_type = None
    file_name = None
    file_size = None
    mime_type = None
    
    if message.photo:
        # –§–æ—Ç–æ - –±–µ—Ä–µ–º —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ
        photo = message.photo[-1]
        file_info = photo
        file_type = "photo"
        file_size = photo.file_size
        mime_type = "image/jpeg"
        file_name = f"photo_{photo.file_id[:8]}.jpg"
        
    elif message.document:
        file_info = message.document
        file_type = "document"
        file_name = message.document.file_name or f"document_{message.document.file_id[:8]}"
        file_size = message.document.file_size
        mime_type = message.document.mime_type
        
    elif message.video:
        file_info = message.video
        file_type = "video"
        file_name = f"video_{message.video.file_id[:8]}.mp4"
        file_size = message.video.file_size
        mime_type = message.video.mime_type or "video/mp4"
        
    elif message.audio:
        file_info = message.audio
        file_type = "audio"
        file_name = message.audio.file_name or f"audio_{message.audio.file_id[:8]}.mp3"
        file_size = message.audio.file_size
        mime_type = message.audio.mime_type or "audio/mpeg"
        
    elif message.voice:
        file_info = message.voice
        file_type = "voice"
        file_name = f"voice_{message.voice.file_id[:8]}.ogg"
        file_size = message.voice.file_size
        mime_type = message.voice.mime_type or "audio/ogg"
        
    elif message.video_note:
        file_info = message.video_note
        file_type = "video_note"
        file_name = f"video_note_{message.video_note.file_id[:8]}.mp4"
        file_size = message.video_note.file_size
        mime_type = "video/mp4"
        
    else:
        await message.answer(
            "‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞.\n"
            "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è: —Ñ–æ—Ç–æ, –¥–æ–∫—É–º–µ–Ω—Ç—ã, –≤–∏–¥–µ–æ, –∞—É–¥–∏–æ, –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.",
            reply_markup=get_send_feedback_keyboard()
        )
        return
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –∫ —Å–ø–∏—Å–∫—É –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏–π
    attachment = {
        'file_id': file_info.file_id,
        'file_type': file_type,
        'file_name': file_name,
        'file_size': file_size,
        'mime_type': mime_type
    }
    attachments.append(attachment)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.update_data(attachments=attachments)
    
    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º (–µ—Å–ª–∏ –µ—Å—Ç—å)
    last_message_id = data.get('last_attachment_message_id')
    if last_message_id:
        try:
            await message.bot.delete_message(message.chat.id, last_message_id)
        except:
            pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è
    
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º
    status_message = await message.answer(
        f"üìé *–ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:* {len(attachments)} —Ñ–∞–π–ª(–æ–≤)\n\n"
        f"üìã *–°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤:*\n",
        parse_mode="Markdown",
        reply_markup=get_send_feedback_keyboard()
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤
    file_list = ""
    for i, att in enumerate(attachments, 1):
        safe_name = escape_markdown(att['file_name'])
        size_mb = (att['file_size'] / (1024 * 1024)) if att['file_size'] else 0
        file_list += f"{i}. `{safe_name}` ({size_mb:.2f} –ú–ë)\n"
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–ª–Ω—ã–º —Å–ø–∏—Å–∫–æ–º
    await status_message.edit_text(
        f"üìé *–ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:* {len(attachments)} —Ñ–∞–π–ª(–æ–≤)\n\n"
        f"üìã *–°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤:*\n{file_list}\n"
        f"üì§ –ú–æ–∂–µ—Ç–µ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –µ—â–µ —Ñ–∞–π–ª—ã –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É.",
        parse_mode="Markdown",
        reply_markup=get_send_feedback_keyboard()
    )
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    await state.update_data(last_attachment_message_id=status_message.message_id)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É"
@router.callback_query(F.data == "send_feedback")
async def send_feedback_with_attachments(callback: CallbackQuery, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    direction_id = data.get('direction_id')
    feedback_text = data.get('feedback_text')
    attachments = data.get('attachments', [])
    
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏–π (–µ—Å–ª–∏ –µ—Å—Ç—å)
    last_message_id = data.get('last_attachment_message_id')
    if last_message_id:
        try:
            await callback.bot.delete_message(callback.message.chat.id, last_message_id)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏–π: {e}")
            # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è
    
    if not direction_id or not feedback_text:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", show_alert=True)
        await state.clear()
        return
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
    if direction_id == "admin":
        direction_name = "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è"
        db_direction_id = None
    else:
        try:
            direction = await db.get_direction_by_id(direction_id)
            direction_name = direction[1] if direction else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ"
            db_direction_id = direction_id
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è {direction_id}: {e}")
            direction_name = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ"
            db_direction_id = direction_id
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞—è–≤–∫—É –≤ –±–∞–∑—É
    try:
        message_id = await db.save_feedback_message(
            callback.from_user.id,
            callback.from_user.username,
            callback.from_user.first_name,
            feedback_text,
            db_direction_id
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏—è
        for attachment in attachments:
            try:
                await db.save_attachment(
                    message_id,
                    attachment['file_id'],
                    attachment['file_type'],
                    attachment['file_name'],
                    attachment['file_size'],
                    attachment['mime_type']
                )
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏—è {attachment['file_name']}: {e}")
                # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥—Ä—É–≥–∏—Ö –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏–π
                
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞—è–≤–∫–∏", show_alert=True)
        await state.clear()
        return
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –æ—Ç–≤–µ—Ç–∞
    try:
        is_admin = await db.is_admin(callback.from_user.id)
        is_teacher = await db.is_teacher(callback.from_user.id)
        
        if is_admin:
            keyboard = get_admin_keyboard()
        elif is_teacher:
            keyboard = get_teacher_keyboard()
        else:
            keyboard = get_main_keyboard()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã: {e}")
        keyboard = get_main_keyboard()  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    attachments_text = ""
    if attachments:
        attachments_text = f"\nüìé *–ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–æ —Ñ–∞–π–ª–æ–≤:* {len(attachments)}"
    
    if direction_id == "admin":
        user_message = (
            f"‚úÖ *–ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!*\n\n"
            f"üìù *–ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏:* #{message_id}\n"
            f"üëë *–ê–¥—Ä–µ—Å–æ–≤–∞–Ω–æ:* {direction_name}\n"
            f"üìã *–°—Ç–∞—Ç—É—Å:* –ù–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏{attachments_text}\n\n"
            f"üí¨ *–í–∞—à–∞ –∑–∞—è–≤–∫–∞:*\n{feedback_text}\n\n"
            "‚è≥ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏.\n"
            "üì± –û—Ç–≤–µ—Ç –ø—Ä–∏–¥—ë—Ç –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.\n"
            "‚ùå –î–æ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ."
        )
    else:
        user_message = (
            f"‚úÖ *–ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!*\n\n"
            f"üìù *–ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏:* #{message_id}\n"
            f"üìö *–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:* {direction_name}\n"
            f"üìã *–°—Ç–∞—Ç—É—Å:* –ù–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏{attachments_text}\n\n"
            f"üí¨ *–í–∞—à–∞ –∑–∞—è–≤–∫–∞:*\n{feedback_text}\n\n"
            "‚è≥ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—é –∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏.\n"
            "üì± –û—Ç–≤–µ—Ç –ø—Ä–∏–¥—ë—Ç –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.\n"
            "‚ùå –î–æ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ."
        )
    
    await safe_edit_message(
        callback.message,
        user_message,
        parse_mode="Markdown"
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
    try:
        await callback.message.answer(
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.",
            reply_markup=keyboard
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã: {e}")
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –±–µ–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
            await callback.message.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.")
        except Exception as e2:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –±–µ–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã: {e2}")
    
    # –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏—è–º–∏
    try:
        await send_notifications_with_attachments(callback.bot, message_id, direction_id, direction_name, 
                                                callback.from_user, feedback_text, attachments)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
        # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –¥–∞–∂–µ –µ—Å–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏—Å—å
    
    await state.clear()
    try:
        await callback.answer("‚úÖ –ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ callback answer: {e}")
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å callback answer, –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ –∞–¥–º–∏–Ω—Å–∫–æ–π –ø–∞–Ω–µ–ª–∏
@router.message(F.text == "üé´ –ó–∞—è–≤–∫–∏")
async def admin_requests_button(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –ó–∞—è–≤–∫–∏"""
    if not await db.is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    if message.chat.type != 'private':
        await message.answer("‚ö†Ô∏è –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö.")
        return
    
    # –ü–µ—Ä–µ–∞–¥—Ä–µ—Å—É–µ–º –Ω–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑ admin_handlers
    from admin_handlers import admin_requests_menu
    await admin_requests_menu(message)

@router.message(F.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def admin_statistics_button(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"""
    if not await db.is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    # –ü–µ—Ä–µ–∞–¥—Ä–µ—Å—É–µ–º –Ω–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑ admin_handlers
    from admin_handlers import admin_statistics_menu
    await admin_statistics_menu(message)

@router.message(F.text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
async def admin_settings_button(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –ù–∞—Å—Ç—Ä–æ–π–∫–∏"""
    if not await db.is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    if message.chat.type != 'private':
        await message.answer("‚ö†Ô∏è –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö.")
        return
    
    # –ü–µ—Ä–µ–∞–¥—Ä–µ—Å—É–µ–º –Ω–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑ admin_handlers
    from admin_handlers import admin_settings_menu
    await admin_settings_menu(message)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ –¥–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π
@router.message(F.text == "üé´ –ú–æ–∏ –∑–∞—è–≤–∫–∏")
async def teacher_requests_button(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –ú–æ–∏ –∑–∞—è–≤–∫–∏"""
    if not await db.is_teacher(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    if message.chat.type != 'private':
        await message.answer("‚ö†Ô∏è –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö.")
        return
    
    # –ü–µ—Ä–µ–∞–¥—Ä–µ—Å—É–µ–º –Ω–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑ teacher_handlers
    from teacher_handlers import teacher_my_requests
    await teacher_my_requests(message)

@router.message(F.text == "üìö –ú–æ–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
async def teacher_directions_button(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –ú–æ–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
    if not await db.is_teacher(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    if message.chat.type != 'private':
        await message.answer("‚ö†Ô∏è –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö.")
        return
    
    # –ü–µ—Ä–µ–∞–¥—Ä–µ—Å—É–µ–º –Ω–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑ teacher_handlers
    from teacher_handlers import teacher_my_directions
    await teacher_my_directions(message)

# –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞
@router.callback_query(F.data == "add_admin")
async def add_admin_start(callback: CallbackQuery, state: FSMContext):
    if not await db.is_admin(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.", show_alert=True)
        return
    
    await callback.message.answer(
        "üë§ *–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞*\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.\n"
        "ID –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å, –ø–æ–ø—Ä–æ—Å–∏–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞–ø–∏—Å–∞—Ç—å –±–æ—Ç—É /start",
        parse_mode="Markdown",
        reply_markup=get_cancel_keyboard()
    )
    await state.set_state(AdminStates.waiting_for_admin_id)
    await callback.answer()

# –ü–æ–ª—É—á–µ–Ω–∏–µ ID –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞
@router.message(StateFilter(AdminStates.waiting_for_admin_id))
async def add_admin_process(message: Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await message.answer("–û—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=get_admin_keyboard())
        await state.clear()
        return
    
    try:
        user_id = int(message.text.strip())
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ —á–µ—Ä–µ–∑ Telegram API
        try:
            user_info = await message.bot.get_chat(user_id)
            username = user_info.username
            first_name = user_info.first_name
        except Exception:
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            username = None
            first_name = "–ù–æ–≤—ã–π –∞–¥–º–∏–Ω"
        
        await db.add_admin(user_id, username, first_name, message.from_user.id)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        display_name = f"@{username}" if username else str(user_id)
        await message.answer(
            f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {display_name} (ID: {user_id}) –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã!",
            reply_markup=get_admin_keyboard()
        )
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}", reply_markup=get_admin_keyboard())
    
    await state.clear()

# –£–¥–∞–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞
@router.callback_query(F.data == "remove_admin")
async def remove_admin_start(callback: CallbackQuery, state: FSMContext):
    if not await db.is_admin(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.", show_alert=True)
        return
    
    await callback.message.answer(
        "üë§ *–£–¥–∞–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞*\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∏–∑ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.\n"
        "‚ö†Ô∏è *–í–Ω–∏–º–∞–Ω–∏–µ:* –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è!",
        parse_mode="Markdown",
        reply_markup=get_cancel_keyboard()
    )
    await state.set_state(AdminStates.waiting_for_remove_admin_id)
    await callback.answer()

# –ü–æ–ª—É—á–µ–Ω–∏–µ ID –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞
@router.message(StateFilter(AdminStates.waiting_for_remove_admin_id))
async def remove_admin_process(message: Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await message.answer("–û—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=get_admin_keyboard())
        await state.clear()
        return
    
    try:
        user_id = int(message.text.strip())
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø—ã—Ç–∞–µ—Ç—Å—è —É–¥–∞–ª–∏—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è
        if user_id == message.from_user.id:
            await message.answer("‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è –∏–∑ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤!")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º
        if not await db.is_admin(user_id):
            await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        try:
            user_info = await message.bot.get_chat(user_id)
            username = user_info.username
            display_name = f"@{username}" if username else str(user_id)
        except Exception:
            display_name = str(user_id)
        
        # –£–¥–∞–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        await db.remove_admin(user_id)
        
        await message.answer(
            f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {display_name} (ID: {user_id}) —É–¥–∞–ª–µ–Ω –∏–∑ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤!",
            reply_markup=get_admin_keyboard()
        )
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}", reply_markup=get_admin_keyboard())
    
    await state.clear()

# –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤
@router.callback_query(F.data == "list_admins")
async def list_admins(callback: CallbackQuery):
    if not await db.is_admin(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.", show_alert=True)
        return
    
    admins = await db.get_all_admins()
    
    if not admins:
        text = "üë• *–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –ø—É—Å—Ç*"
    else:
        text = "üë• *–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:*\n\n"
        for user_id, username, first_name in admins:
            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è - –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç username, –µ—Å–ª–∏ –Ω–µ—Ç —Ç–æ ID
            if username:
                display_name = f"@{username}"
            else:
                display_name = f"{user_id}"
            
            text += f"‚Ä¢ {display_name} - `{user_id}`\n"
    
    from aiogram.utils.keyboard import InlineKeyboardBuilder
    from aiogram.types import InlineKeyboardButton
    
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", callback_data="back_to_settings"))
    
    await callback.message.edit_text(
        text, 
        parse_mode="Markdown",
        reply_markup=builder.as_markup()
    )
    await callback.answer()

# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–¥–º–∏–Ω–∞—Ö
@router.callback_query(F.data == "update_admins_info")
async def update_admins_info(callback: CallbackQuery):
    if not await db.is_admin(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.", show_alert=True)
        return
    
    await callback.answer("üîÑ –û–±–Ω–æ–≤–ª—è—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞—Ö...")
    
    admins = await db.get_all_admins()
    updated_count = 0
    
    for user_id, old_username, old_first_name in admins:
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            user_info = await callback.bot.get_chat(user_id)
            new_username = user_info.username
            new_first_name = user_info.first_name
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–∑–º–µ–Ω–∏–ª–∞—Å—å
            if new_username != old_username or new_first_name != old_first_name:
                await db.update_admin_info(user_id, new_username, new_first_name)
                updated_count += 1
                
        except Exception:
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å
            continue
    
    if updated_count > 0:
        await callback.message.answer(
            f"‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –¥–ª—è {updated_count} –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤!",
            reply_markup=get_admin_keyboard()
        )
    else:
        await callback.message.answer(
            "‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞—Ö –∞–∫—Ç—É–∞–ª—å–Ω–∞.",
            reply_markup=get_admin_keyboard()
        )

# –í–æ–∑–≤—Ä–∞—Ç –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –∞–¥–º–∏–Ω–∞–º–∏ (—Ç–µ–ø–µ—Ä—å –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º)
@router.callback_query(F.data == "back_to_admin_management")
async def back_to_admin_management(callback: CallbackQuery):
    if not await db.is_admin(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.", show_alert=True)
        return
    
    from chat_handler import ChatBehavior
    from enhanced_keyboards import get_settings_keyboard
    chat_type = await ChatBehavior.determine_chat_type(callback.message)
    
    text = (
        "‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞*\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –Ω–∞—Å—Ç—Ä–æ–µ–∫:"
    )
    
    await callback.message.edit_text(
        text,
        parse_mode="Markdown",
        reply_markup=get_settings_keyboard(chat_type)
    )
    await callback.answer()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π - —Ç–µ–ø–µ—Ä—å –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º
@router.callback_query(F.data == "notification_settings")
async def notification_settings(callback: CallbackQuery):
    if not await db.is_admin(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.", show_alert=True)
        return
    
    from chat_handler import ChatBehavior
    from enhanced_keyboards import get_settings_keyboard
    chat_type = await ChatBehavior.determine_chat_type(callback.message)
    
    text = (
        "‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞*\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –Ω–∞—Å—Ç—Ä–æ–µ–∫:"
    )
    
    await callback.message.edit_text(
        text,
        parse_mode="Markdown",
        reply_markup=get_settings_keyboard(chat_type)
    )
    await callback.answer()

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —á–∞—Ç–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
@router.callback_query(F.data == "add_notification_chat")
async def add_notification_chat_start(callback: CallbackQuery, state: FSMContext):
    if not await db.is_admin(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.", show_alert=True)
        return
    
    await callback.message.answer(
        "üì¢ *–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —á–∞—Ç–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π*\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ ID —á–∞—Ç–∞, –≤ –∫–æ—Ç–æ—Ä—ã–π –¥–æ–ª–∂–Ω—ã –ø—Ä–∏—Ö–æ–¥–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏.\n\n"
        "üîç *–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å ID —á–∞—Ç–∞:*\n"
        "‚Ä¢ üÜï *–õ–µ–≥–∫–∏–π —Å–ø–æ—Å–æ–±:* –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø—É - –æ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–∫–∞–∂–µ—Ç ID\n"
        "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É `/chatid` –≤ –ª—é–±–æ–º —á–∞—Ç–µ —Å –±–æ—Ç–æ–º\n"
        "‚Ä¢ ID —á–∞—Ç–∞ –º–æ–∂–Ω–æ —É–∑–Ω–∞—Ç—å —á–µ—Ä–µ–∑ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –±–æ—Ç–æ–≤ (@userinfobot)\n"
        "‚Ä¢ ID –≥—Ä—É–ø–ø—ã –æ–±—ã—á–Ω–æ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ\n\n"
        "üí° *–ü—Ä–∏–º–µ—Ä—ã:*\n"
        "‚Ä¢ `-1001234567890` (–≥—Ä—É–ø–ø–∞)\n"
        "‚Ä¢ `123456789` (–ª–∏—á–Ω—ã–π —á–∞—Ç)",
        parse_mode="Markdown",
        reply_markup=get_cancel_keyboard()
    )
    await state.set_state(NotificationStates.waiting_for_chat_id)
    await callback.answer()

# –ü–æ–ª—É—á–µ–Ω–∏–µ ID —á–∞—Ç–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
@router.message(StateFilter(NotificationStates.waiting_for_chat_id))
async def add_notification_chat_process(message: Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await message.answer("–û—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=get_admin_keyboard())
        await state.clear()
        return
    
    try:
        chat_id = int(message.text.strip())
        
        # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ
        try:
            chat_info = await message.bot.get_chat(chat_id)
            chat_title = chat_info.title or f"–õ–∏—á–Ω—ã–π —á–∞—Ç {chat_info.first_name}"
            chat_type = chat_info.type
        except Exception:
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ
            chat_title = f"–ß–∞—Ç {chat_id}"
            chat_type = "unknown"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –ª–∏ —É–∂–µ —ç—Ç–æ—Ç —á–∞—Ç
        if await db.is_notification_chat(chat_id):
            await message.answer(
                f"‚ö†Ô∏è –ß–∞—Ç `{chat_id}` —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π!",
                parse_mode="Markdown",
                reply_markup=get_admin_keyboard()
            )
            await state.clear()
            return
        
        await db.add_notification_chat(chat_id, chat_title, chat_type, message.from_user.id)
        
        await message.answer(
            f"‚úÖ –ß–∞—Ç –¥–æ–±–∞–≤–ª–µ–Ω!\n\n"
            f"üìã *–ù–∞–∑–≤–∞–Ω–∏–µ:* {chat_title}\n"
            f"üÜî *ID:* `{chat_id}`\n"
            f"üì± *–¢–∏–ø:* {chat_type}\n\n"
            f"–¢–µ–ø–µ—Ä—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –≤ —ç—Ç–æ—Ç —á–∞—Ç.",
            parse_mode="Markdown",
            reply_markup=get_admin_keyboard()
        )
    except ValueError:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID —á–∞—Ç–∞. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID.\n\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: `-1001234567890` –∏–ª–∏ `123456789`"
        )
        return
    except Exception as e:
        await message.answer(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —á–∞—Ç–∞: {str(e)}",
            reply_markup=get_admin_keyboard()
        )
    
    await state.clear()

# –°–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
@router.callback_query(F.data == "list_notification_chats")
async def list_notification_chats(callback: CallbackQuery):
    if not await db.is_admin(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.", show_alert=True)
        return
    
    chats = await db.get_notification_chats()
    
    if not chats:
        text = (
            "üì¢ *–ß–∞—Ç—ã –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π*\n\n"
            "–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç. –î–æ–±–∞–≤—å—Ç–µ —á–∞—Ç—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ–± –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏."
        )
        keyboard = get_back_to_notification_settings_keyboard()
    else:
        text = "üì¢ *–ß–∞—Ç—ã –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:*\n\n"
        for chat_id, chat_title, chat_type in chats:
            status = "üîî –ê–∫—Ç–∏–≤–µ–Ω"
            text += f"‚Ä¢ {chat_title}\n"
            text += f"  ID: `{chat_id}` | {chat_type} | {status}\n\n"
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —á–∞—Ç–∞–º–∏
        from aiogram.utils.keyboard import InlineKeyboardBuilder
        from aiogram.types import InlineKeyboardButton
        builder = InlineKeyboardBuilder()
        
        for chat_id, chat_title, chat_type in chats:
            # –û–±—Ä–µ–∑–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è
            button_text = chat_title[:30] + "..." if len(chat_title) > 30 else chat_title
            builder.add(InlineKeyboardButton(
                text=f"‚öôÔ∏è {button_text}",
                callback_data=f"manage_chat:{chat_id}"
            ))
        
        builder.add(InlineKeyboardButton(
            text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º",
            callback_data="settings_notifications"
        ))
        builder.adjust(1)
        keyboard = builder.as_markup()
    
    await callback.message.edit_text(
        text,
        parse_mode="Markdown",
        reply_markup=keyboard
    )
    await callback.answer()

# –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º —á–∞—Ç–æ–º
@router.callback_query(F.data.startswith("manage_chat:"))
async def manage_notification_chat(callback: CallbackQuery):
    if not await db.is_admin(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.", show_alert=True)
        return
    
    chat_id = int(callback.data.split(":", 1)[1])
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ –∏–∑ –ë–î
    chats = await db.get_notification_chats()
    chat_info = None
    for c_id, c_title, c_type in chats:
        if c_id == chat_id:
            chat_info = (c_id, c_title, c_type)
            break
    
    if not chat_info:
        await callback.answer("‚ùå –ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    chat_id, chat_title, chat_type = chat_info
    is_active = await db.is_notification_chat(chat_id)
    
    status = "üîî –ê–∫—Ç–∏–≤–µ–Ω" if is_active else "üîá –û—Ç–∫–ª—é—á–µ–Ω"
    text = (
        f"‚öôÔ∏è *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —á–∞—Ç–æ–º*\n\n"
        f"üìã *–ù–∞–∑–≤–∞–Ω–∏–µ:* {chat_title}\n"
        f"üÜî *ID:* `{chat_id}`\n"
        f"üì± *–¢–∏–ø:* {chat_type}\n"
        f"üìä *–°—Ç–∞—Ç—É—Å:* {status}\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )
    
    await callback.message.edit_text(
        text,
        parse_mode="Markdown",
        reply_markup=get_notification_chat_actions_keyboard(chat_id, is_active)
    )
    await callback.answer()

# –í–∫–ª—é—á–µ–Ω–∏–µ/–æ—Ç–∫–ª—é—á–µ–Ω–∏–µ —á–∞—Ç–∞
@router.callback_query(F.data.startswith("toggle_chat:"))
async def toggle_notification_chat(callback: CallbackQuery):
    if not await db.is_admin(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.", show_alert=True)
        return
    
    parts = callback.data.split(":")
    chat_id = int(parts[1])
    is_active = bool(int(parts[2]))
    
    await db.toggle_notification_chat(chat_id, is_active)
    
    action = "–≤–∫–ª—é—á–µ–Ω" if is_active else "–æ—Ç–∫–ª—é—á–µ–Ω"
    await callback.answer(f"‚úÖ –ß–∞—Ç {action}!")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await manage_notification_chat(callback)

# –£–¥–∞–ª–µ–Ω–∏–µ —á–∞—Ç–∞
@router.callback_query(F.data.startswith("remove_chat:"))
async def remove_notification_chat(callback: CallbackQuery):
    if not await db.is_admin(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.", show_alert=True)
        return
    
    chat_id = int(callback.data.split(":", 1)[1])
    
    await db.remove_notification_chat(chat_id)
    
    await callback.answer("‚úÖ –ß–∞—Ç —É–¥–∞–ª–µ–Ω –∏–∑ —Å–ø–∏—Å–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π!")
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É —á–∞—Ç–æ–≤
    await list_notification_chats(callback)

# –ö–æ–º–∞–Ω–¥–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–µ—Ä–µ–ø–∏—Å–∫–∏ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
@router.message(Command("msg"))
async def show_user_conversation(message: Message):
    if not await db.is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    # –ü–∞—Ä—Å–∏–º –∫–æ–º–∞–Ω–¥—É: /msg 123456789
    parts = message.text.split()
    if len(parts) != 2:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `/msg ID_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è`\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: `/msg 123456789`",
            parse_mode="Markdown"
        )
        return
    
    try:
        user_id = int(parts[1])
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –î–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ.")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ–ø–∏—Å–∫—É
    conversation = await db.get_user_conversation(user_id)
    
    if not conversation:
        await message.answer(f"‚ùå –ü–µ—Ä–µ–ø–∏—Å–∫–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º `{user_id}` –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", parse_mode="Markdown")
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø–µ—Ä–µ–ø–∏—Å–∫–∏
    text = f"üé´ *–ó–∞—è–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è* `{user_id}`\n\n"
    
    for msg_id, msg_text, created_at, is_answered, answer_text, answered_at, answered_by, status in conversation:
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
        from datetime import datetime
        created_date = datetime.fromisoformat(created_at).strftime("%d.%m.%Y %H:%M")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏
        if status == 'closed' or is_answered:
            status_text = "üîí –ó–∞–∫—Ä—ã—Ç–∞"
            status_emoji = "‚úÖ"
        else:
            status_text = "üîì –ê–∫—Ç–∏–≤–Ω–∞"
            status_emoji = "‚è≥"
        
        text += f"{status_emoji} *–ó–∞—è–≤–∫–∞ #{msg_id}* ({created_date})\n"
        text += f"üìã *–°—Ç–∞—Ç—É—Å:* {status_text}\n"
        text += f"üë§ *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:* {msg_text}\n"
        
        if is_answered and answer_text:
            answered_date = datetime.fromisoformat(answered_at).strftime("%d.%m.%Y %H:%M") if answered_at else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            text += f"üí¨ *–û—Ç–≤–µ—Ç –∞–¥–º–∏–Ω–∞* ({answered_date}): {answer_text}\n"
        else:
            text += "‚è≥ *–û–∂–∏–¥–∞–µ—Ç –æ—Ç–≤–µ—Ç–∞*\n"
        
        text += "\n" + "‚îÄ" * 40 + "\n\n"
    
    # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ —á–∞—Å—Ç–∏
    max_length = 4000
    if len(text) > max_length:
        parts = []
        current_part = ""
        
        for line in text.split('\n'):
            if len(current_part + line + '\n') > max_length:
                if current_part:
                    parts.append(current_part)
                    current_part = line + '\n'
                else:
                    parts.append(line[:max_length])
            else:
                current_part += line + '\n'
        
        if current_part:
            parts.append(current_part)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ —á–∞—Å—Ç—è–º
        for i, part in enumerate(parts):
            if i == 0:
                await message.answer(part, parse_mode="Markdown")
            else:
                await message.answer(f"*–ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –ø–µ—Ä–µ–ø–∏—Å–∫–∏...*\n\n{part}", parse_mode="Markdown")
    else:
        await message.answer(text, parse_mode="Markdown")

# –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è–º–∏ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏

# –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è–º–∏ (callback) - —Ç–µ–ø–µ—Ä—å –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º
@router.callback_query(F.data == "teacher_management")
async def teacher_management(callback: CallbackQuery):
    if not await db.is_admin(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.", show_alert=True)
        return
    
    from chat_handler import ChatBehavior
    from enhanced_keyboards import get_settings_keyboard
    chat_type = await ChatBehavior.determine_chat_type(callback.message)
    
    text = (
        "‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞*\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –Ω–∞—Å—Ç—Ä–æ–µ–∫:"
    )
    
    await callback.message.edit_text(
        text,
        parse_mode="Markdown",
        reply_markup=get_settings_keyboard(chat_type)
    )
    await callback.answer()

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
@router.callback_query(F.data == "add_teacher")
async def add_teacher_start(callback: CallbackQuery, state: FSMContext):
    if not await db.is_admin(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.", show_alert=True)
        return
    
    await callback.message.answer(
        "üë®‚Äçüè´ *–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è*\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –Ω–∞–∑–Ω–∞—á–∏—Ç—å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–º.\n"
        "ID –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å, –ø–æ–ø—Ä–æ—Å–∏–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞–ø–∏—Å–∞—Ç—å –±–æ—Ç—É /start",
        parse_mode="Markdown",
        reply_markup=get_cancel_keyboard()
    )
    await state.set_state(TeacherStates.waiting_for_teacher_id)
    await callback.answer()

# –ü–æ–ª—É—á–µ–Ω–∏–µ ID –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
@router.message(StateFilter(TeacherStates.waiting_for_teacher_id))
async def add_teacher_process(message: Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await message.answer("–û—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=get_admin_keyboard())
        await state.clear()
        return
    
    try:
        user_id = int(message.text.strip())
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ —á–µ—Ä–µ–∑ Telegram API
        try:
            user_info = await message.bot.get_chat(user_id)
            username = user_info.username
            first_name = user_info.first_name
        except Exception:
            username = None
            first_name = "–ù–æ–≤—ã–π –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å"
        
        await db.add_teacher(user_id, username, first_name, message.from_user.id)
        
        display_name = f"@{username}" if username else str(user_id)
        await message.answer(
            f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {display_name} (ID: {user_id}) –Ω–∞–∑–Ω–∞—á–µ–Ω –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–º!",
            reply_markup=get_admin_keyboard()
        )
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}", reply_markup=get_admin_keyboard())
    
    await state.clear()

# –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
@router.callback_query(F.data == "remove_teacher")
async def remove_teacher_start(callback: CallbackQuery, state: FSMContext):
    if not await db.is_admin(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.", show_alert=True)
        return
    
    await callback.message.answer(
        "üë®‚Äçüè´ *–£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è*\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ ID –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å.\n"
        "‚ö†Ô∏è *–í–Ω–∏–º–∞–Ω–∏–µ:* –ë—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã –≤—Å–µ –ø—Ä–∏–≤—è–∑–∫–∏ –∫ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º!",
        parse_mode="Markdown",
        reply_markup=get_cancel_keyboard()
    )
    await state.set_state(TeacherStates.waiting_for_remove_teacher_id)
    await callback.answer()

# –ü–æ–ª—É—á–µ–Ω–∏–µ ID –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
@router.message(StateFilter(TeacherStates.waiting_for_remove_teacher_id))
async def remove_teacher_process(message: Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await message.answer("–û—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=get_admin_keyboard())
        await state.clear()
        return
    
    try:
        user_id = int(message.text.strip())
        
        if not await db.is_teacher(user_id):
            await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–º.")
            return
        
        try:
            user_info = await message.bot.get_chat(user_id)
            username = user_info.username
            display_name = f"@{username}" if username else str(user_id)
        except Exception:
            display_name = str(user_id)
        
        await db.remove_teacher(user_id)
        
        await message.answer(
            f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {display_name} (ID: {user_id}) —É–¥–∞–ª–µ–Ω –∏–∑ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π!",
            reply_markup=get_admin_keyboard()
        )
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}", reply_markup=get_admin_keyboard())
    
    await state.clear()

# –°–ø–∏—Å–æ–∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π
@router.callback_query(F.data == "list_teachers")
async def list_teachers(callback: CallbackQuery):
    if not await db.is_admin(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.", show_alert=True)
        return
    
    teachers = await db.get_all_teachers()
    
    if not teachers:
        text = "üë®‚Äçüè´ *–°–ø–∏—Å–æ–∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç*"
    else:
        text = "üë®‚Äçüè´ *–°–ø–∏—Å–æ–∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π:*\n\n"
        for user_id, username, first_name in teachers:
            if username:
                display_name = f"@{username}"
            else:
                display_name = f"{user_id}"
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
            directions = await db.get_directions_for_teacher(user_id)
            direction_names = [d[1] for d in directions] if directions else ["–ù–µ—Ç –ø—Ä–∏–≤—è–∑–æ–∫"]
            
            text += f"‚Ä¢ {display_name} - `{user_id}`\n"
            text += f"  üìö –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è: {', '.join(direction_names[:2])}{'...' if len(direction_names) > 2 else ''}\n\n"
    
    await callback.message.edit_text(
        text, 
        parse_mode="Markdown",
        reply_markup=get_back_to_teacher_management_keyboard()
    )
    await callback.answer()

# –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–≤—è–∑–∫–∞–º–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π
@router.callback_query(F.data == "teacher_directions")
async def teacher_directions(callback: CallbackQuery):
    if not await db.is_admin(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.", show_alert=True)
        return
    
    directions = await db.get_all_directions()
    
    if not directions:
        await callback.message.edit_text(
            "üìö *–ü—Ä–∏–≤—è–∑–∫–∏ –∫ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º*\n\n"
            "‚ùå –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.\n"
            "–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è –∏–∑ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞.",
            parse_mode="Markdown",
            reply_markup=get_back_to_teacher_management_keyboard()
        )
        await callback.answer()
        return
    
    await callback.message.edit_text(
        "üîó *–ü—Ä–∏–≤—è–∑–∫–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π –∫ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º*\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è–º–∏:",
        parse_mode="Markdown",
        reply_markup=get_directions_list_keyboard(directions)
    )
    await callback.answer()

# –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º
@router.callback_query(F.data.startswith("manage_direction:"))
async def manage_direction(callback: CallbackQuery):
    if not await db.is_admin(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.", show_alert=True)
        return
    
    direction_id = int(callback.data.split(":", 1)[1])
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏
    direction = await db.get_direction_by_id(direction_id)
    if not direction:
        await callback.answer("‚ùå –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
        return
    
    direction_name = direction[1]
    
    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    teachers = await db.get_teachers_for_direction(direction_id)
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π
    all_teachers = await db.get_all_teachers()
    
    if not all_teachers:
        await callback.message.edit_text(
            f"üìö *–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:* {direction_name}\n\n"
            "‚ùå –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.\n"
            "–°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π –≤ —Å–∏—Å—Ç–µ–º—É.",
            parse_mode="Markdown",
            reply_markup=get_back_to_teacher_management_keyboard()
        )
        await callback.answer()
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å —Ç–µ–∫—É—â–∏–º–∏ –ø—Ä–∏–≤—è–∑–∫–∞–º–∏
    text = f"üìö *–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:* {direction_name}\n\n"
    
    if teachers:
        text += "üë®‚Äçüè´ *–ù–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏:*\n"
        for teacher_id, username, first_name in teachers:
            display_name = f"@{username}" if username else f"ID{teacher_id}"
            text += f"‚Ä¢ {display_name}\n"
        text += "\n"
    else:
        text += "‚ùå *–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω—ã*\n\n"
    
    text += "üí° *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:*\n"
    text += "‚Ä¢ ‚ùå - –æ—Ç–≤—è–∑–∞—Ç—å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è\n"
    text += "‚Ä¢ ‚ûï - –ø—Ä–∏–≤—è–∑–∞—Ç—å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è"
    
    await callback.message.edit_text(
        text,
        parse_mode="Markdown",
        reply_markup=get_direction_teachers_keyboard(direction_id, teachers, all_teachers)
    )
    await callback.answer()

# –ü—Ä–∏–≤—è–∑–∫–∞ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –∫ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é
@router.callback_query(F.data.startswith("assign_teacher:"))
async def assign_teacher(callback: CallbackQuery):
    if not await db.is_admin(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.", show_alert=True)
        return
    
    parts = callback.data.split(":")
    direction_id = int(parts[1])
    teacher_id = int(parts[2])
    
    await db.assign_teacher_to_direction(teacher_id, direction_id, callback.from_user.id)
    
    await callback.answer("‚úÖ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é!")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await manage_direction(callback)

# –û—Ç–≤—è–∑–∫–∞ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –æ—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
@router.callback_query(F.data.startswith("unassign_teacher:"))
async def unassign_teacher(callback: CallbackQuery):
    if not await db.is_admin(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.", show_alert=True)
        return
    
    parts = callback.data.split(":")
    direction_id = int(parts[1])
    teacher_id = int(parts[2])
    
    await db.remove_teacher_from_direction(teacher_id, direction_id)
    
    await callback.answer("‚úÖ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –æ—Ç–≤—è–∑–∞–Ω –æ—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è!")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await manage_direction(callback)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è (—Ç–æ–ª—å–∫–æ –≤ –õ–°)
@router.message(F.chat.type == "private")
async def handle_text_messages(message: Message):
    # –ï—Å–ª–∏ –∞–¥–º–∏–Ω –∏–ª–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –æ—Ç–≤–µ—á–∞–µ—Ç reply –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞ (–≤ –õ–° –∏–ª–∏ –≥—Ä—É–ø–ø–µ)
    if message.reply_to_message and message.reply_to_message.from_user.id == message.bot.id:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–≤–µ—á–∞—é—â–∏–π - –∞–¥–º–∏–Ω –∏–ª–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å
        is_admin = await db.is_admin(message.from_user.id)
        is_teacher = await db.is_teacher(message.from_user.id)
        
        if is_admin or is_teacher:
            # –ò—â–µ–º –Ω–æ–º–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ç–µ–∫—Å—Ç–µ
            reply_text = message.reply_to_message.text or ""
            match = re.search(r'#(\d+)', reply_text)
            if match:
                message_id = int(match.group(1))
                reply_content = message.text
                
                # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ö–æ–¥–Ω—É—é –∑–∞—è–≤–∫—É
                feedback_msg = await db.get_feedback_message(message_id)
                if feedback_msg:
                    user_id = feedback_msg[1]
                    original_text = feedback_msg[4]
                    is_answered = feedback_msg[6]
                    status = feedback_msg[7] if len(feedback_msg) > 7 else 'active'
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞—è–≤–∫–∞ –µ—â—ë –∞–∫—Ç–∏–≤–Ω–∞
                    if status == 'closed' or is_answered:
                        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –æ—Ç–≤–µ—á–∞—é—â–µ–≥–æ
                        if is_admin:
                            closed_keyboard = get_admin_keyboard()
                        elif is_teacher:
                            closed_keyboard = get_teacher_keyboard()
                        else:
                            closed_keyboard = get_admin_keyboard()  # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                        
                        await message.answer(
                            f"‚ö†Ô∏è –ó–∞—è–≤–∫–∞ #{message_id} —É–∂–µ –∑–∞–∫—Ä—ã—Ç–∞.",
                            reply_markup=closed_keyboard
                        )
                        return
                    
                    # –ï—Å–ª–∏ –æ—Ç–≤–µ—á–∞–µ—Ç –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å, –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ –¥–∞–Ω–Ω—É—é –∑–∞—è–≤–∫—É
                    if is_teacher and not is_admin:
                        can_reply = await db.can_teacher_reply_to_request(message.from_user.id, message_id)
                        if not can_reply:
                            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
                            teacher_no_rights_keyboard = get_teacher_keyboard()
                            
                            await message.answer(
                                f"‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∑–∞—è–≤–∫—É #{message_id}.\n"
                                "–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–≤–µ—á–∞—Ç—å —Ç–æ–ª—å–∫–æ –Ω–∞ –∑–∞—è–≤–∫–∏ –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º, –∫ –∫–æ—Ç–æ—Ä—ã–º –≤—ã –ø—Ä–∏–≤—è–∑–∞–Ω—ã.",
                                reply_markup=teacher_no_rights_keyboard
                            )
                            return
                    
                    try:
                        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–æ–ª—å –æ—Ç–≤–µ—á–∞—é—â–µ–≥–æ (–ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —É–∂–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –≤—ã—à–µ)
                        
                        if is_admin and not is_teacher:
                            responder_role = "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"
                        elif is_teacher:
                            responder_role = "–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å"
                        else:
                            responder_role = "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"  # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                        
                        user_reply = (
                            f"‚úÖ *–û—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à—É –∑–∞—è–≤–∫—É #{message_id}*\n\n"
                            f"üë§ *–û—Ç–≤–µ—Ç–∏–ª:* {responder_role}\n"
                            f"üìã *–°—Ç–∞—Ç—É—Å:* –ó–∞—è–≤–∫–∞ –∑–∞–∫—Ä—ã—Ç–∞\n\n"
                            f"üí¨ *–í–∞—à–∞ –∑–∞—è–≤–∫–∞:*\n{original_text}\n\n"
                            f"üìù *–û—Ç–≤–µ—Ç:*\n{reply_content}\n\n"
                            f"üí° –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ."
                        )
                        
                        await message.bot.send_message(user_id, user_reply, parse_mode="Markdown")
                        await db.mark_message_answered(message_id, message.from_user.id, reply_content)
                        
                        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –∞–¥–º–∏–Ω—Å–∫–∏—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è—Ö
                        await db.update_notification_status(message.bot, message_id, f"–ó–∞–∫—Ä—ã—Ç–∞ ({responder_role})", reply_content)
                        
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è–º –æ –∑–∞–∫—Ä—ã—Ç–∏–∏ –∑–∞—è–≤–∫–∏
                        await db.notify_teachers_about_closed_request(message.bot, message_id, responder_role, reply_content)
                        
                        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –æ—Ç–≤–µ—á–∞—é—â–µ–≥–æ
                        if is_admin:
                            response_keyboard = get_admin_keyboard()
                        elif is_teacher:
                            response_keyboard = get_teacher_keyboard()
                        else:
                            response_keyboard = get_admin_keyboard()  # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                        
                        await message.answer(
                            f"‚úÖ –û—Ç–≤–µ—Ç –Ω–∞ –∑–∞—è–≤–∫—É #{message_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω! –ó–∞—è–≤–∫–∞ –∑–∞–∫—Ä—ã—Ç–∞.",
                            reply_markup=response_keyboard
                        )
                        
                    except Exception as e:
                        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –æ—Ç–≤–µ—á–∞—é—â–µ–≥–æ
                        if is_admin:
                            error_keyboard = get_admin_keyboard()
                        elif is_teacher:
                            error_keyboard = get_teacher_keyboard()
                        else:
                            error_keyboard = get_admin_keyboard()  # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                        
                        await message.answer(
                            f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞: {str(e)}",
                            reply_markup=error_keyboard
                        )
                else:
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –æ—Ç–≤–µ—á–∞—é—â–µ–≥–æ
                    if is_admin:
                        not_found_keyboard = get_admin_keyboard()
                    elif is_teacher:
                        not_found_keyboard = get_teacher_keyboard()
                    else:
                        not_found_keyboard = get_admin_keyboard()  # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                    
                    await message.answer(
                        f"‚ùå –ó–∞—è–≤–∫–∞ #{message_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.",
                        reply_markup=not_found_keyboard
                    )

def escape_markdown(text):
    """–≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è Markdown"""
    if not text:
        return ""
    return text.replace('*', '\\*').replace('_', '\\_').replace('[', '\\[').replace(']', '\\]').replace('`', '\\`')

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏—è–º–∏
async def send_notifications_with_attachments(bot, message_id, direction_id, direction_name, user, feedback_text, attachments):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–µ —Å –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏—è–º–∏"""
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–π —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    base_notification = (
        f"üé´ *–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞*\n\n"
        f"üë§ *–û—Ç:* {user.first_name}"
    )
    if user.username:
        base_notification += f" (@{user.username})"
    
    base_notification += f"\nüÜî *ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:* `{user.id}`\n"
    base_notification += f"üìù *–ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏:* #{message_id}\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏
    if direction_id == "admin":
        base_notification += f"üëë *–ê–¥—Ä–µ—Å–æ–≤–∞–Ω–æ:* {direction_name}\n"
    else:
        base_notification += f"üìö *–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:* {direction_name}\n"
    
    base_notification += f"üìã *–°—Ç–∞—Ç—É—Å:* –ù–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏—è—Ö
    if attachments:
        base_notification += f"üìé *–ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–æ —Ñ–∞–π–ª–æ–≤:* {len(attachments)}\n"
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤
        for i, attachment in enumerate(attachments[:3]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 —Ñ–∞–π–ª–∞
            safe_name = escape_markdown(attachment['file_name'])
            base_notification += f"   ‚Ä¢ `{safe_name}`\n"
        if len(attachments) > 3:
            base_notification += f"   ‚Ä¢ ... –∏ –µ—â–µ {len(attachments) - 3} —Ñ–∞–π–ª(–æ–≤)\n"
    
    base_notification += f"\nüí¨ *–¢–µ–∫—Å—Ç –∑–∞—è–≤–∫–∏:*\n{escape_markdown(feedback_text)}\n\n"
    base_notification += "üí° *–î–ª—è –æ—Ç–≤–µ—Ç–∞ –∏ –∑–∞–∫—Ä—ã—Ç–∏—è –∑–∞—è–≤–∫–∏:* –ø—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ (reply/—Å–≤–∞–π–ø)\n"
    base_notification += "‚úÖ –ü–æ—Å–ª–µ –æ—Ç–≤–µ—Ç–∞ –∑–∞—è–≤–∫–∞ –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–∫—Ä—ã—Ç–∞"
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –ù–ï –∑–∞—è–≤–∫–∞ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏
    if direction_id != "admin":
        teachers = await db.get_teachers_for_direction(direction_id)
        
        if teachers:
            teacher_text = f"üë®‚Äçüè´ *–ó–∞—è–≤–∫–∞ –ø–æ –≤–∞—à–µ–º—É –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é*\n\n" + base_notification
            for teacher_id, teacher_username, teacher_first_name in teachers:
                try:
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                    await bot.send_message(teacher_id, teacher_text, parse_mode="Markdown")
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏—è
                    await send_attachments_group(bot, teacher_id, attachments)
                        
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—é {teacher_id}: {e}")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
    if direction_id == "admin":
        admin_text = f"üëë *–ó–∞—è–≤–∫–∞ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏*\n\n" + base_notification
    else:
        admin_text = f"üëë *–ó–∞—è–≤–∫–∞ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏* (–¥—É–±–ª–∏–∫–∞—Ç)\n\n" + base_notification
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ —á–∞—Ç—ã –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
    notification_chats = await db.get_notification_chats()
    if notification_chats:
        for chat_id, chat_title, chat_type in notification_chats:
            try:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                sent_message = await bot.send_message(chat_id, admin_text, parse_mode="Markdown")
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º message_id –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                await db.save_notification_message(message_id, chat_id, sent_message.message_id)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏—è
                await send_attachments_group(bot, chat_id, attachments)
                    
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —á–∞—Ç {chat_id} ({chat_title}): {e}")
    else:
        # –ï—Å–ª–∏ —á–∞—Ç—ã –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º –∞–¥–º–∏–Ω–∞–º –≤ –õ–°
        admins = await db.get_all_admins()
        for admin_id, _, _ in admins:
            try:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                sent_message = await bot.send_message(admin_id, admin_text, parse_mode="Markdown")
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º message_id –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                await db.save_notification_message(message_id, admin_id, sent_message.message_id)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏—è
                await send_attachments_group(bot, admin_id, attachments)
                    
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–¥–º–∏–Ω—É {admin_id}: {e}")

async def send_attachments_group(bot, user_id, attachments):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≥—Ä—É–ø–ø—É –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º"""
    if not attachments:
        return
        
    try:
        from aiogram.types import InputMediaPhoto, InputMediaDocument, InputMediaVideo, InputMediaAudio
        
        media_group = []
        
        for i, attachment in enumerate(attachments):
            file_type = attachment['file_type']
            file_id = attachment['file_id']
            safe_file_name = attachment['file_name'].replace('*', '\\*').replace('_', '\\_').replace('[', '\\[').replace(']', '\\]').replace('`', '\\`')
            
            # –î–æ–±–∞–≤–ª—è–µ–º caption —Ç–æ–ª—å–∫–æ –∫ –ø–µ—Ä–≤–æ–º—É —Ñ–∞–π–ª—É
            caption = f"üìé –ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –∫ –∑–∞—è–≤–∫–µ:\n" if i == 0 else None
            
            if file_type == "photo":
                media_item = InputMediaPhoto(
                    media=file_id,
                    caption=caption,
                    parse_mode="Markdown"
                )
            elif file_type == "document":
                media_item = InputMediaDocument(
                    media=file_id,
                    caption=caption,
                    parse_mode="Markdown"
                )
            elif file_type == "video":
                media_item = InputMediaVideo(
                    media=file_id,
                    caption=caption,
                    parse_mode="Markdown"
                )
            elif file_type == "audio":
                media_item = InputMediaAudio(
                    media=file_id,
                    caption=caption,
                    parse_mode="Markdown"
                )
            else:
                # –î–ª—è voice –∏ video_note –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∏ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è –≤ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø–µ
                continue
                
            media_group.append(media_item)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—É
        if media_group:
            try:
                await bot.send_media_group(user_id, media_group)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
                # –ï—Å–ª–∏ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª—ã –ø–æ –æ–¥–Ω–æ–º—É
                for attachment in attachments:
                    await send_single_attachment(bot, user_id, attachment)
                return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º voice –∏ video_note –æ—Ç–¥–µ–ª—å–Ω–æ
        for attachment in attachments:
            file_type = attachment['file_type']
            file_id = attachment['file_id']
            safe_file_name = attachment['file_name'].replace('*', '\\*').replace('_', '\\_').replace('[', '\\[').replace(']', '\\]').replace('`', '\\`')
            
            try:
                if file_type == "voice":
                    await bot.send_voice(user_id, file_id, caption=f"üìé {safe_file_name}", parse_mode="Markdown")
                elif file_type == "video_note":
                    await bot.send_video_note(user_id, file_id)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ {file_type} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
                
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
        # –ï—Å–ª–∏ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª—ã –ø–æ –æ–¥–Ω–æ–º—É
        for attachment in attachments:
            await send_single_attachment(bot, user_id, attachment)

async def send_single_attachment(bot, user_id, attachment):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ–¥–∏–Ω –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    try:
        file_type = attachment['file_type']
        file_id = attachment['file_id']
        
        # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞
        safe_file_name = attachment['file_name'].replace('*', '\\*').replace('_', '\\_').replace('[', '\\[').replace(']', '\\]').replace('`', '\\`')
        caption = f"üìé {safe_file_name}"
        
        if file_type == "photo":
            await bot.send_photo(user_id, file_id, caption=caption, parse_mode="Markdown")
        elif file_type == "document":
            await bot.send_document(user_id, file_id, caption=caption, parse_mode="Markdown")
        elif file_type == "video":
            await bot.send_video(user_id, file_id, caption=caption, parse_mode="Markdown")
        elif file_type == "audio":
            await bot.send_audio(user_id, file_id, caption=caption, parse_mode="Markdown")
        elif file_type == "voice":
            await bot.send_voice(user_id, file_id, caption=caption, parse_mode="Markdown")
        elif file_type == "video_note":
            await bot.send_video_note(user_id, file_id)
            
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏—è {attachment['file_name']} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
