"""
–•–µ–Ω–¥–ª–µ—Ä—ã –¥–ª—è –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–æ–≤ (–ø—É–±–ª–∏—á–Ω—ã—Ö –∏ –∞–¥–º–∏–Ω—Å–∫–∏—Ö)
"""
import asyncio
import aiosqlite
from datetime import datetime, timedelta
from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.types import InlineKeyboardButton

from database import db
from chat_handler import ChatType, ChatBehavior
from enhanced_keyboards import (
    get_public_group_keyboard, get_admin_group_keyboard, 
    get_quick_schedule_keyboard, get_admin_requests_keyboard
)
from keyboards import (
    get_schedule_directions_keyboard, get_back_to_directions_keyboard, 
    get_direction_days_keyboard, get_schedule_directions_keyboard_for_groups,
    get_back_to_directions_keyboard_for_groups
)
from schedule_parser import schedule_parser

group_router = Router()

# –ü—É–±–ª–∏—á–Ω—ã–µ –≥—Ä—É–ø–ø—ã

@group_router.message(Command("start"), F.chat.type.in_({"group", "supergroup"}))
async def group_start_command(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ /start –≤ –≥—Ä—É–ø–ø–∞—Ö"""
    chat_type = await ChatBehavior.determine_chat_type(message)
    
    welcome_text = ChatBehavior.get_welcome_message(
        chat_type, 
        message.from_user.first_name,
        message.chat.title
    )
    
    if chat_type == ChatType.PUBLIC_GROUP:
        keyboard = get_public_group_keyboard()
    elif chat_type == ChatType.ADMIN_GROUP:
        keyboard = get_admin_group_keyboard()
    else:
        keyboard = get_public_group_keyboard()
    
    await message.answer(welcome_text, parse_mode="Markdown", reply_markup=keyboard)

@group_router.callback_query(F.data == "schedule")
async def schedule_callback(callback: CallbackQuery):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –≤ –≥—Ä—É–ø–ø–µ"""
    await callback.message.edit_text(
        "üìÖ *–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è:*",
        parse_mode="Markdown",
        reply_markup=get_schedule_directions_keyboard_for_groups()
    )
    await callback.answer()

@group_router.callback_query(F.data == "quick_schedule")
async def quick_schedule_callback(callback: CallbackQuery):
    """–ë—ã—Å—Ç—Ä—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –≤ –≥—Ä—É–ø–ø–µ"""
    await callback.message.edit_text(
        "üìÖ *–ë—ã—Å—Ç—Ä—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è*\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å:",
        parse_mode="Markdown",
        reply_markup=get_quick_schedule_keyboard()
    )
    await callback.answer()

@group_router.callback_query(F.data == "schedule_today")
async def schedule_today_callback(callback: CallbackQuery):
    """–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è"""
    today = datetime.now().strftime("%A").lower()
    day_mapping = {
        'monday': '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫',
        'tuesday': '–í—Ç–æ—Ä–Ω–∏–∫', 
        'wednesday': '–°—Ä–µ–¥–∞',
        'thursday': '–ß–µ—Ç–≤–µ—Ä–≥',
        'friday': '–ü—è—Ç–Ω–∏—Ü–∞',
        'saturday': '–°—É–±–±–æ—Ç–∞',
        'sunday': '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ'
    }
    
    today_ru = day_mapping.get(today, '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫')
    schedule_text = await get_today_schedule(today_ru)
    
    await callback.message.edit_text(
        schedule_text,
        parse_mode="Markdown",
        reply_markup=get_back_to_quick_schedule_keyboard()
    )
    await callback.answer()

@group_router.callback_query(F.data == "schedule_tomorrow")
async def schedule_tomorrow_callback(callback: CallbackQuery):
    """–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞"""
    tomorrow = (datetime.now() + timedelta(days=1)).strftime("%A").lower()
    day_mapping = {
        'monday': '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫',
        'tuesday': '–í—Ç–æ—Ä–Ω–∏–∫', 
        'wednesday': '–°—Ä–µ–¥–∞',
        'thursday': '–ß–µ—Ç–≤–µ—Ä–≥',
        'friday': '–ü—è—Ç–Ω–∏—Ü–∞',
        'saturday': '–°—É–±–±–æ—Ç–∞',
        'sunday': '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ'
    }
    
    tomorrow_ru = day_mapping.get(tomorrow, '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫')
    schedule_text = await get_today_schedule(tomorrow_ru, "–∑–∞–≤—Ç—Ä–∞")
    
    await callback.message.edit_text(
        schedule_text,
        parse_mode="Markdown",
        reply_markup=get_back_to_quick_schedule_keyboard()
    )
    await callback.answer()

@group_router.callback_query(F.data == "show_chat_id")
async def show_group_chat_id(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å ID –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ —á–∞—Ç–∞"""
    chat = callback.message.chat
    chat_title = chat.title or "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"
    chat_type_ru = {
        'group': '–ì—Ä—É–ø–ø–∞',
        'supergroup': '–°—É–ø–µ—Ä–≥—Ä—É–ø–ø–∞',
        'channel': '–ö–∞–Ω–∞–ª'
    }.get(chat.type, chat.type)
    
    text = (
        f"üìã *{chat_type_ru}: {chat_title}*\n\n"
        f"üÜî *ID —á–∞—Ç–∞:* `{chat.id}`\n"
        f"üì± *–¢–∏–ø:* {chat_type_ru}\n\n"
        f"üì¢ *–î–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:*\n"
        f"–°–∫–æ–ø–∏—Ä—É–π—Ç–µ ID: `{chat.id}`\n"
        f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ –±–æ—Ç–∞ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π."
    )
    
    await callback.message.edit_text(text, parse_mode="Markdown")
    await callback.answer()

@group_router.callback_query(F.data == "bot_info")
async def bot_info_callback(callback: CallbackQuery):
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ"""
    text = (
        "ü§ñ *IT-Cube Bot*\n\n"
        "üìö *–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:*\n"
        "‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∑–∞–Ω—è—Ç–∏–π\n"
        "‚Ä¢ –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å —Å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è–º–∏\n"
        "‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏\n"
        "‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∞–º–∏\n\n"
        "üë• *–î–ª—è –≥—Ä—É–ø–ø:*\n"
        "‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º\n"
        "‚Ä¢ –ü–æ–ª—É—á–µ–Ω–∏–µ ID —á–∞—Ç–∞\n"
        "‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (–¥–ª—è –∞–¥–º–∏–Ω—Å–∫–∏—Ö –≥—Ä—É–ø–ø)\n\n"
        "üí¨ *–ü–æ–ª–Ω—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –¥–æ—Å—Ç—É–ø–µ–Ω –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö —Å –±–æ—Ç–æ–º.*"
    )
    
    await callback.message.edit_text(text, parse_mode="Markdown")
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –≥—Ä—É–ø–ø

@group_router.callback_query(F.data.startswith("dir:"))
async def group_show_direction_schedule(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø–µ"""
    direction_idx = int(callback.data.split(":", 1)[1])
    directions = schedule_parser.get_directions()
    
    if direction_idx >= len(directions):
        await callback.answer("‚ùå –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
        return
    
    direction = directions[direction_idx]
    info = schedule_parser.get_direction_info(direction)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏
    text = f"üìö *{direction}*\n\n"
    text += f"üë®‚Äçüè´ *–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å:* {info.get('–ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
    text += f"üè¢ *–ö–∞–±–∏–Ω–µ—Ç:* {info.get('–∫–∞–±–∏–Ω–µ—Ç', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n\n"
    text += "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    
    await callback.message.edit_text(
        text,
        parse_mode="Markdown",
        reply_markup=get_direction_days_keyboard(direction_idx)
    )
    await callback.answer()

@group_router.callback_query(F.data.startswith("full:"))
async def group_show_full_schedule(callback: CallbackQuery):
    """–ü–æ–ª–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø–µ"""
    direction_idx = int(callback.data.split(":", 1)[1])
    directions = schedule_parser.get_directions()
    
    if direction_idx >= len(directions):
        await callback.answer("‚ùå –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
        return
    
    direction = directions[direction_idx]
    schedule_text = schedule_parser.format_direction_schedule(direction)
    
    await callback.message.edit_text(
        schedule_text,
        parse_mode="Markdown",
        reply_markup=get_back_to_directions_keyboard_for_groups()
    )
    await callback.answer()

@group_router.callback_query(F.data.startswith("day:"))
async def group_show_day_schedule(callback: CallbackQuery):
    """–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –¥–µ–Ω—å –≤ –≥—Ä—É–ø–ø–µ"""
    parts = callback.data.split(":", 2)
    direction_idx = int(parts[1])
    short_day = parts[2]
    
    # –ú–∞–ø–ø–∏–Ω–≥ –∫–æ—Ä–æ—Ç–∫–∏—Ö –Ω–∞–∑–≤–∞–Ω–∏–π –¥–Ω–µ–π –æ–±—Ä–∞—Ç–Ω–æ –∫ –ø–æ–ª–Ω—ã–º
    day_reverse_mapping = {
        '–ø–Ω': '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–≤—Ç': '–í—Ç–æ—Ä–Ω–∏–∫', '—Å—Ä': '–°—Ä–µ–¥–∞',
        '—á—Ç': '–ß–µ—Ç–≤–µ—Ä–≥', '–ø—Ç': '–ü—è—Ç–Ω–∏—Ü–∞', '—Å–±': '–°—É–±–±–æ—Ç–∞'
    }
    day = day_reverse_mapping.get(short_day, short_day)
    
    directions = schedule_parser.get_directions()
    if direction_idx >= len(directions):
        await callback.answer("‚ùå –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
        return
    
    direction = directions[direction_idx]
    info = schedule_parser.get_direction_info(direction)
    
    if day in info.get('–¥–Ω–∏', {}):
        schedule = info['–¥–Ω–∏'][day]
        text = f"üìö *{direction}*\n"
        text += f"üë®‚Äçüè´ *–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å:* {info['–ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å']}\n"
        text += f"üè¢ *–ö–∞–±–∏–Ω–µ—Ç:* {info['–∫–∞–±–∏–Ω–µ—Ç']}\n\n"
        text += f"üìÖ *{day}:*\n"
        for group_schedule in schedule:
            text += f"‚Ä¢ {group_schedule}\n"
    else:
        text = f"–í {day} –∑–∞–Ω—è—Ç–∏–π –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é '{direction}' –Ω–µ—Ç"
    
    await callback.message.edit_text(
        text,
        parse_mode="Markdown",
        reply_markup=get_back_to_directions_keyboard_for_groups()
    )
    await callback.answer()

@group_router.callback_query(F.data == "back_to_directions")
async def group_back_to_directions(callback: CallbackQuery):
    """–ù–∞–∑–∞–¥ –∫ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º –≤ –≥—Ä—É–ø–ø–µ"""
    await callback.message.edit_text(
        "üìÖ *–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è:*",
        parse_mode="Markdown",
        reply_markup=get_schedule_directions_keyboard_for_groups()
    )
    await callback.answer()

@group_router.callback_query(F.data == "back_to_group_menu")
async def back_to_group_menu(callback: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –≥—Ä—É–ø–ø—ã"""
    chat_type = await ChatBehavior.determine_chat_type(callback.message)
    
    welcome_text = ChatBehavior.get_welcome_message(
        chat_type, 
        callback.from_user.first_name,
        callback.message.chat.title
    )
    
    if chat_type == ChatType.PUBLIC_GROUP:
        keyboard = get_public_group_keyboard()
    elif chat_type == ChatType.ADMIN_GROUP:
        keyboard = get_admin_group_keyboard()
    else:
        keyboard = get_public_group_keyboard()
    
    await callback.message.edit_text(welcome_text, parse_mode="Markdown", reply_markup=keyboard)
    await callback.answer()

# –ê–¥–º–∏–Ω—Å–∫–∏–µ –≥—Ä—É–ø–ø—ã

@group_router.callback_query(F.data == "active_requests")
async def admin_active_requests(callback: CallbackQuery):
    """–ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞—è–≤–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω—Å–∫–æ–π –≥—Ä—É–ø–ø—ã"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –∞–¥–º–∏–Ω—Å–∫–∞—è –≥—Ä—É–ø–ø–∞
    chat_type = await ChatBehavior.determine_chat_type(callback.message)
    if chat_type != ChatType.ADMIN_GROUP:
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –≤ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –≥—Ä—É–ø–ø–∞—Ö", show_alert=True)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞—è–≤–∫–∏
    active_requests = await get_active_requests_summary()
    
    text = (
        "üé´ *–ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞—è–≤–∫–∏*\n\n"
        f"{active_requests}\n\n"
        "üí° –î–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∑–∞—è–≤–∫—É –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ reply –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏–ª–∏ –∫–æ–º–∞–Ω–¥—É /msg ID_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –õ–° –±–æ—Ç–∞."
    )
    
    await callback.message.edit_text(
        text,
        parse_mode="Markdown",
        reply_markup=get_admin_requests_keyboard()
    )
    await callback.answer()

@group_router.callback_query(F.data == "group_statistics")
async def group_statistics_callback(callback: CallbackQuery):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –≥—Ä—É–ø–ø—ã"""
    chat_type = await ChatBehavior.determine_chat_type(callback.message)
    if chat_type != ChatType.ADMIN_GROUP:
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –≤ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –≥—Ä—É–ø–ø–∞—Ö", show_alert=True)
        return
    
    stats = await get_group_statistics()
    
    await callback.message.edit_text(
        stats,
        parse_mode="Markdown"
    )
    await callback.answer()

@group_router.callback_query(F.data == "group_settings")
async def group_settings_callback(callback: CallbackQuery):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥—Ä—É–ø–ø—ã"""
    chat_type = await ChatBehavior.determine_chat_type(callback.message)
    if chat_type != ChatType.ADMIN_GROUP:
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –≤ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –≥—Ä—É–ø–ø–∞—Ö", show_alert=True)
        return
    
    chat_id = callback.message.chat.id
    is_active = await db.is_notification_chat(chat_id)
    
    text = (
        f"‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥—Ä—É–ø–ø—ã*\n\n"
        f"üÜî *ID —á–∞—Ç–∞:* `{chat_id}`\n"
        f"üìä *–°—Ç–∞—Ç—É—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:* {'üîî –í–∫–ª—é—á–µ–Ω—ã' if is_active else 'üîá –û—Ç–∫–ª—é—á–µ–Ω—ã'}\n\n"
        f"üí° –î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –±–æ—Ç–∞ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö."
    )
    
    await callback.message.edit_text(text, parse_mode="Markdown")
    await callback.answer()

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏

async def get_today_schedule(day: str, day_name: str = "—Å–µ–≥–æ–¥–Ω—è") -> str:
    """–ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –¥–µ–Ω—å"""
    directions = schedule_parser.get_directions()
    
    if not directions:
        return f"üìÖ *–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ {day_name}*\n\n‚ùå –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ."
    
    schedule_text = f"üìÖ *–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ {day_name} ({day})*\n\n"
    
    has_classes = False
    for direction in directions:
        info = schedule_parser.get_direction_info(direction)
        if day in info.get('–¥–Ω–∏', {}):
            has_classes = True
            schedule = info['–¥–Ω–∏'][day]
            schedule_text += f"üìö *{direction}*\n"
            schedule_text += f"üë®‚Äçüè´ {info.get('–ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
            schedule_text += f"üè¢ {info.get('–∫–∞–±–∏–Ω–µ—Ç', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
            
            for group_schedule in schedule:
                schedule_text += f"‚Ä¢ {group_schedule}\n"
            schedule_text += "\n"
    
    if not has_classes:
        schedule_text += f"üò¥ –í {day.lower()} –∑–∞–Ω—è—Ç–∏–π –Ω–µ—Ç.\n–û—Ç–ª–∏—á–Ω—ã–π –¥–µ–Ω—å –¥–ª—è –æ—Ç–¥—ã—Ö–∞!"
    
    return schedule_text

async def get_active_requests_summary() -> str:
    """–ü–æ–ª—É—á–∏—Ç—å –∫—Ä–∞—Ç–∫—É—é —Å–≤–æ–¥–∫—É –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞—è–≤–∫–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        async with aiosqlite.connect(db.db_path) as conn:
            cursor = await conn.execute('''
                SELECT COUNT(*) as total,
                       COUNT(CASE WHEN created_at > datetime('now', '-1 day') THEN 1 END) as today,
                       COUNT(CASE WHEN created_at > datetime('now', '-1 hour') THEN 1 END) as hour
                FROM feedback_messages 
                WHERE status = 'active'
            ''')
            stats = await cursor.fetchone()
            
            if not stats:
                return "üìä –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫ –Ω–µ—Ç"
            
            total, today, hour = stats
            
            text = f"üìä *–í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö:* {total}\n"
            text += f"üìÖ *–ó–∞ —Å–µ–≥–æ–¥–Ω—è:* {today}\n"
            text += f"üïê *–ó–∞ —á–∞—Å:* {hour}\n"
            
            if total == 0:
                text += "\n‚úÖ –í—Å–µ –∑–∞—è–≤–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã!"
            elif hour > 5:
                text += "\n‚ö†Ô∏è –ú–Ω–æ–≥–æ –Ω–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å!"
            
            return text
            
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}"

async def get_group_statistics() -> str:
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –≥—Ä—É–ø–ø—ã"""
    try:
        async with aiosqlite.connect(db.db_path) as conn:
            # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞—è–≤–æ–∫
            cursor = await conn.execute('''
                SELECT 
                    COUNT(*) as total_requests,
                    COUNT(CASE WHEN status = 'active' THEN 1 END) as active_requests,
                    COUNT(CASE WHEN status = 'closed' THEN 1 END) as closed_requests,
                    COUNT(CASE WHEN created_at > datetime('now', '-7 days') THEN 1 END) as week_requests
                FROM feedback_messages
            ''')
            request_stats = await cursor.fetchone()
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            cursor = await conn.execute('''
                SELECT COUNT(DISTINCT user_id) as unique_users
                FROM feedback_messages
                WHERE created_at > datetime('now', '-30 days')
            ''')
            user_stats = await cursor.fetchone()
            
            if not request_stats:
                return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"
            
            total, active, closed, week = request_stats
            unique_users = user_stats[0] if user_stats else 0
            
            text = "üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ IT-Cube Bot*\n\n"
            text += f"üé´ *–ó–∞—è–≤–∫–∏:*\n"
            text += f"‚Ä¢ –í—Å–µ–≥–æ: {total}\n"
            text += f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {active}\n"
            text += f"‚Ä¢ –ó–∞–∫—Ä—ã—Ç—ã—Ö: {closed}\n"
            text += f"‚Ä¢ –ó–∞ –Ω–µ–¥–µ–ª—é: {week}\n\n"
            text += f"üë• *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:*\n"
            text += f"‚Ä¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–∞ –º–µ—Å—è—Ü: {unique_users}\n\n"
            
            if active > 0:
                response_rate = round((closed / total) * 100, 1) if total > 0 else 0
                text += f"üìà *–ü—Ä–æ—Ü–µ–Ω—Ç –æ—Ç–≤–µ—Ç–æ–≤:* {response_rate}%"
            else:
                text += "‚úÖ *–í—Å–µ –∑–∞—è–≤–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã!*"
            
            return text
            
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}"

def get_back_to_quick_schedule_keyboard():
    """–ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –±—ã—Å—Ç—Ä–æ–º—É —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é"""
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="quick_schedule"))
    return builder.as_markup()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø–∞—Ö
@group_router.message(F.text.contains("@") & F.chat.type.in_({"group", "supergroup"}))
async def handle_bot_mention(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø–∞—Ö"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É–ø–æ–º—è–Ω—É—Ç –ª–∏ –±–æ—Ç
    bot_info = await message.bot.get_me()
    bot_username = bot_info.username
    
    if f"@{bot_username}" in message.text.lower():
        chat_type = await ChatBehavior.determine_chat_type(message)
        
        # –ü—Ä–æ—Å—Ç—ã–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è
        if "—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ" in message.text.lower():
            await message.reply(
                "üìÖ –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ –≤ –õ–°!",
                reply_markup=get_schedule_directions_keyboard_for_groups()
            )
        elif "–ø–æ–º–æ—â—å" in message.text.lower() or "help" in message.text.lower():
            help_text = (
                "ü§ñ *–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –≤ –≥—Ä—É–ø–ø–µ:*\n\n"
                "‚Ä¢ `/start` - –ø–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é\n"
                "‚Ä¢ `/chatid` - –ø–æ–∫–∞–∑–∞—Ç—å ID —á–∞—Ç–∞\n"
                "‚Ä¢ –£–ø–æ–º—è–Ω–∏—Ç–µ –º–µ–Ω—è —Å —Å–ª–æ–≤–æ–º '—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ' –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞\n\n"
                "üí¨ *–î–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è!*"
            )
            await message.reply(help_text, parse_mode="Markdown")
        else:
            await message.reply(
                "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç IT-Cube.\n"
                "üí¨ –ù–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º!"
            )
