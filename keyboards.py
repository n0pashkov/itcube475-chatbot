from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder, ReplyKeyboardBuilder
from schedule_parser import schedule_parser

def get_main_keyboard():
    """–ì–ª–∞–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞"""
    builder = ReplyKeyboardBuilder()
    builder.add(KeyboardButton(text="üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ"))
    builder.add(KeyboardButton(text="üí¨ –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å"))
    builder.adjust(2)
    return builder.as_markup(resize_keyboard=True)

# –°—Ç–∞—Ä–∞—è —Ñ—É–Ω–∫—Ü–∏—è get_admin_keyboard —É–¥–∞–ª–µ–Ω–∞ - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è get_admin_keyboard –∏–∑ enhanced_keyboards.py

def get_schedule_directions_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏"""
    directions = schedule_parser.get_directions()
    
    if not directions:
        return InlineKeyboardMarkup(inline_keyboard=[[
            InlineKeyboardButton(text="‚ùå –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ", callback_data="no_schedule")
        ]])
    
    builder = InlineKeyboardBuilder()
    
    for idx, direction in enumerate(directions):
        # –û–±—Ä–µ–∑–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –¥–ª—è –∫–Ω–æ–ø–æ–∫
        button_text = direction[:45] + "..." if len(direction) > 45 else direction
        builder.add(InlineKeyboardButton(
            text=button_text,
            callback_data=f"dir:{idx}"  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ—Ä–æ—Ç–∫–∏–π –∏–Ω–¥–µ–∫—Å
        ))
    
    builder.adjust(1)  # –ü–æ –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–µ –≤ —Ä—è–¥
    return builder.as_markup()

def get_direction_days_keyboard(direction_idx: int):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –¥–Ω—è–º–∏ –¥–ª—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
    directions = schedule_parser.get_directions()
    if direction_idx >= len(directions):
        return InlineKeyboardMarkup(inline_keyboard=[[
            InlineKeyboardButton(text="‚ùå –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", callback_data="no_direction")
        ]])
    
    direction = directions[direction_idx]
    days = schedule_parser.get_days_for_direction(direction)
    
    if not days:
        return InlineKeyboardMarkup(inline_keyboard=[[
            InlineKeyboardButton(text="‚ùå –ù–µ—Ç –∑–∞–Ω—è—Ç–∏–π", callback_data="no_classes")
        ]])
    
    builder = InlineKeyboardBuilder()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–æ–∫–∞–∑–∞ –≤—Å–µ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
    builder.add(InlineKeyboardButton(
        text="üìã –ü–æ–ª–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ",
        callback_data=f"full:{direction_idx}"
    ))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –¥–Ω—è
    day_mapping = {
        '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫': '–ø–Ω', '–í—Ç–æ—Ä–Ω–∏–∫': '–≤—Ç', '–°—Ä–µ–¥–∞': '—Å—Ä', 
        '–ß–µ—Ç–≤–µ—Ä–≥': '—á—Ç', '–ü—è—Ç–Ω–∏—Ü–∞': '–ø—Ç', '–°—É–±–±–æ—Ç–∞': '—Å–±'
    }
    
    for day in days:
        short_day = day_mapping.get(day, day[:2])
        builder.add(InlineKeyboardButton(
            text=day,
            callback_data=f"day:{direction_idx}:{short_day}"
        ))
    
    # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
    builder.add(InlineKeyboardButton(
        text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º",
        callback_data="back_to_directions"
    ))
    
    builder.adjust(1)  # –ü–æ –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–µ –≤ —Ä—è–¥
    return builder.as_markup()

def get_back_to_directions_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π –Ω–∞–∑–∞–¥ –∫ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º"""
    return InlineKeyboardMarkup(inline_keyboard=[[
        InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º", callback_data="back_to_directions")
    ]])

def get_schedule_directions_keyboard_for_groups():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏ –¥–ª—è –≥—Ä—É–ø–ø (—Å –∫–Ω–æ–ø–∫–æ–π –Ω–∞–∑–∞–¥ –≤ –º–µ–Ω—é)"""
    directions = schedule_parser.get_directions()
    
    if not directions:
        return InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ", callback_data="no_schedule")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_group_menu")]
        ])
    
    builder = InlineKeyboardBuilder()
    
    for idx, direction in enumerate(directions):
        # –û–±—Ä–µ–∑–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –¥–ª—è –∫–Ω–æ–ø–æ–∫
        button_text = direction[:45] + "..." if len(direction) > 45 else direction
        builder.add(InlineKeyboardButton(
            text=button_text,
            callback_data=f"dir:{idx}"  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ—Ä–æ—Ç–∫–∏–π –∏–Ω–¥–µ–∫—Å
        ))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é"
    builder.add(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_group_menu"))
    
    builder.adjust(1)  # –ü–æ –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–µ –≤ —Ä—è–¥
    return builder.as_markup()

def get_back_to_directions_keyboard_for_groups():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π –Ω–∞–∑–∞–¥ –∫ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º –¥–ª—è –≥—Ä—É–ø–ø"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º", callback_data="back_to_directions")],
        [InlineKeyboardButton(text="üè† –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_group_menu")]
    ])

def get_admin_management_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏"""
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞", callback_data="add_admin"))
    builder.add(InlineKeyboardButton(text="‚ûñ –£–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∞", callback_data="remove_admin"))
    builder.add(InlineKeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤", callback_data="list_admins"))
    builder.add(InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é", callback_data="update_admins_info"))
    builder.add(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", callback_data="back_to_settings"))
    builder.adjust(1)
    return builder.as_markup()

def get_directions_keyboard(directions):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏"""
    builder = InlineKeyboardBuilder()
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é –∫–Ω–æ–ø–∫—É "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è"
    builder.add(InlineKeyboardButton(
        text="üëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è",
        callback_data="select_direction:admin"
    ))
    
    for direction_id, direction_name in directions:
        # –û–±—Ä–µ–∑–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –¥–ª—è –∫–Ω–æ–ø–æ–∫
        button_text = direction_name[:45] + "..." if len(direction_name) > 45 else direction_name
        builder.add(InlineKeyboardButton(
            text=button_text,
            callback_data=f"select_direction:{direction_id}"
        ))
    
    builder.add(InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_feedback"))
    builder.adjust(1)
    return builder.as_markup()

def get_teacher_management_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è–º–∏"""
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è", callback_data="add_teacher"))
    builder.add(InlineKeyboardButton(text="‚ûñ –£–¥–∞–ª–∏—Ç—å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è", callback_data="remove_teacher"))
    builder.add(InlineKeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π", callback_data="list_teachers"))
    builder.add(InlineKeyboardButton(text="üîó –ü—Ä–∏–≤—è–∑–∫–∏ –∫ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º", callback_data="teacher_directions"))
    builder.add(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", callback_data="back_to_settings"))
    builder.adjust(1)
    return builder.as_markup()

def get_back_to_teacher_management_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π –Ω–∞–∑–∞–¥ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è–º–∏"""
    return InlineKeyboardMarkup(inline_keyboard=[[
        InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è–º", callback_data="settings_teachers")
    ]])

def get_directions_list_keyboard(directions):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–æ —Å–ø–∏—Å–∫–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏"""
    builder = InlineKeyboardBuilder()
    
    for direction_id, direction_name in directions:
        button_text = direction_name[:40] + "..." if len(direction_name) > 40 else direction_name
        builder.add(InlineKeyboardButton(
            text=button_text,
            callback_data=f"manage_direction:{direction_id}"
        ))
    
    builder.add(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è–º", callback_data="settings_teachers"))
    builder.adjust(1)
    return builder.as_markup()

def get_direction_teachers_keyboard(direction_id, teachers, all_teachers):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è–º–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
    builder = InlineKeyboardBuilder()
    
    assigned_teacher_ids = [t[0] for t in teachers]
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π
    if teachers:
        for teacher_id, username, first_name in teachers:
            display_name = f"@{username}" if username else f"ID{teacher_id}"
            builder.add(InlineKeyboardButton(
                text=f"‚ùå {display_name}",
                callback_data=f"unassign_teacher:{direction_id}:{teacher_id}"
            ))
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π
    available_teachers = [t for t in all_teachers if t[0] not in assigned_teacher_ids]
    if available_teachers:
        for teacher_id, username, first_name in available_teachers:
            display_name = f"@{username}" if username else f"ID{teacher_id}"
            builder.add(InlineKeyboardButton(
                text=f"‚ûï {display_name}",
                callback_data=f"assign_teacher:{direction_id}:{teacher_id}"
            ))
    
    builder.add(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º", callback_data="teacher_directions"))
    builder.adjust(1)
    return builder.as_markup()

def get_cancel_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –æ—Ç–º–µ–Ω—ã"""
    return ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")]],
        resize_keyboard=True
    )

def get_cancel_inline_keyboard():
    """Inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –æ—Ç–º–µ–Ω—ã"""
    return InlineKeyboardMarkup(inline_keyboard=[[
        InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_feedback")
    ]])

def get_send_feedback_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–∫–∏ —Å –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏—è–º–∏"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É", callback_data="send_feedback")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_feedback")]
    ])

def get_back_to_admin_management_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π –Ω–∞–∑–∞–¥ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –∞–¥–º–∏–Ω–∞–º–∏"""
    return InlineKeyboardMarkup(inline_keyboard=[[
        InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é", callback_data="back_to_admin_management")
    ]])

def get_notification_settings_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —á–∞—Ç", callback_data="add_notification_chat"))
    builder.add(InlineKeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤", callback_data="list_notification_chats"))
    builder.add(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", callback_data="back_to_settings"))
    builder.adjust(1)
    return builder.as_markup()

def get_back_to_notification_settings_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π –Ω–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    return InlineKeyboardMarkup(inline_keyboard=[[
        InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", callback_data="settings_notifications")
    ]])

def get_notification_chat_actions_keyboard(chat_id: int, is_active: bool):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–µ–π—Å—Ç–≤–∏–π —Å —á–∞—Ç–æ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    builder = InlineKeyboardBuilder()
    
    # –ö–Ω–æ–ø–∫–∞ –≤–∫–ª—é—á–∏—Ç—å/–æ—Ç–∫–ª—é—á–∏—Ç—å
    if is_active:
        builder.add(InlineKeyboardButton(text="üîá –û—Ç–∫–ª—é—á–∏—Ç—å", callback_data=f"toggle_chat:{chat_id}:0"))
    else:
        builder.add(InlineKeyboardButton(text="üîî –í–∫–ª—é—á–∏—Ç—å", callback_data=f"toggle_chat:{chat_id}:1"))
    
    # –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–∏—Ç—å
    builder.add(InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"remove_chat:{chat_id}"))
    
    # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
    builder.add(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="list_notification_chats"))
    
    builder.adjust(2, 1, 1)
    return builder.as_markup()
