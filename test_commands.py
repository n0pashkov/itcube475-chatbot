#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã –∫–æ–º–∞–Ω–¥ —Å @username –≤ –≥—Ä—É–ø–ø–∞—Ö.
"""

import asyncio
import logging
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

def test_command_filters():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç, –∫–∞–∫ —Ä–∞–±–æ—Ç–∞—é—Ç —Ñ–∏–ª—å—Ç—Ä—ã –∫–æ–º–∞–Ω–¥ –≤ aiogram"""
    try:
        from aiogram.filters import Command
        from aiogram.types import Message, User, Chat
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —á–∞—Ç –≥—Ä—É–ø–ø—ã
        test_chat = Chat(id=-1001234567890, type="supergroup", title="Test Group")
        test_user = User(id=123456789, is_bot=False, first_name="TestUser")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∫–æ–º–∞–Ω–¥
        commands_to_test = [
            "/menu",           # –û–±—ã—á–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞
            "/menu@testbot",   # –ö–æ–º–∞–Ω–¥–∞ —Å —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º –±–æ—Ç–∞  
            "/start",          # –û–±—ã—á–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞
            "/start@testbot",  # –ö–æ–º–∞–Ω–¥–∞ —Å —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º –±–æ—Ç–∞
            "/chatid",         # –û–±—ã—á–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞
            "/chatid@testbot", # –ö–æ–º–∞–Ω–¥–∞ —Å —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º –±–æ—Ç–∞
        ]
        
        command_filter_menu = Command("menu")
        command_filter_start = Command("start") 
        command_filter_chatid = Command("chatid")
        
        logger.info("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –∫–æ–º–∞–Ω–¥:")
        
        for cmd_text in commands_to_test:
            # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            message_data = {
                "message_id": 1,
                "date": int(datetime.now().timestamp()),
                "chat": test_chat,
                "from": test_user,
                "text": cmd_text
            }
            
            message = Message(**message_data)
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
            menu_match = command_filter_menu.check(message)
            start_match = command_filter_start.check(message)
            chatid_match = command_filter_chatid.check(message)
            
            if cmd_text.startswith("/menu"):
                result = "‚úÖ" if menu_match else "‚ùå"
                logger.info(f"{result} '{cmd_text}' -> Command('menu'): {menu_match}")
            elif cmd_text.startswith("/start"):
                result = "‚úÖ" if start_match else "‚ùå" 
                logger.info(f"{result} '{cmd_text}' -> Command('start'): {start_match}")
            elif cmd_text.startswith("/chatid"):
                result = "‚úÖ" if chatid_match else "‚ùå"
                logger.info(f"{result} '{cmd_text}' -> Command('chatid'): {chatid_match}")
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        return False

def test_group_types():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ç–∏–ø—ã —á–∞—Ç–æ–≤"""
    try:
        from aiogram.types import Chat
        from aiogram import F
        
        # –°–æ–∑–¥–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã —á–∞—Ç–æ–≤
        chats_to_test = [
            ("group", "–ì—Ä—É–ø–ø–∞"),
            ("supergroup", "–°—É–ø–µ—Ä–≥—Ä—É–ø–ø–∞"),
            ("private", "–õ–∏—á–Ω—ã–π —á–∞—Ç")
        ]
        
        group_filter = F.chat.type.in_({"group", "supergroup"})
        
        logger.info("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–∏–ø–æ–≤ —á–∞—Ç–æ–≤:")
        
        for chat_type, chat_name in chats_to_test:
            test_chat = Chat(id=123456789, type=chat_type, title=f"Test {chat_name}")
            
            # –°–æ–∑–¥–∞–µ–º mock —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–∞
            class MockMessage:
                def __init__(self, chat):
                    self.chat = chat
            
            message = MockMessage(test_chat)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–ª—å—Ç—Ä (–∏–º–∏—Ç–∏—Ä—É–µ–º –ø–æ–≤–µ–¥–µ–Ω–∏–µ)
            is_group = chat_type in {"group", "supergroup"}
            result = "‚úÖ" if is_group else "‚ùå"
            
            logger.info(f"{result} {chat_name} ({chat_type}): –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –≥—Ä—É–ø–ø–æ–≤—ã—Ö —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤: {is_group}")
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–∏–ø–æ–≤ —á–∞—Ç–æ–≤: {e}")
        return False

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –∫–æ–º–∞–Ω–¥ —Å @username")
    print("="*50)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –∫–æ–º–∞–Ω–¥
    logger.info("1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤ Command()...")
    commands_ok = test_command_filters()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ç–∏–ø—ã —á–∞—Ç–æ–≤
    logger.info("2. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–æ–≤ —á–∞—Ç–æ–≤...")
    chat_types_ok = test_group_types()
    
    # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print("\n" + "="*50)
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    print("="*50)
    print(f"‚úÖ –§–∏–ª—å—Ç—Ä—ã –∫–æ–º–∞–Ω–¥: {'–†–∞–±–æ—Ç–∞—é—Ç' if commands_ok else '–û—à–∏–±–∫–∞'}")
    print(f"‚úÖ –¢–∏–ø—ã —á–∞—Ç–æ–≤: {'–†–∞–±–æ—Ç–∞—é—Ç' if chat_types_ok else '–û—à–∏–±–∫–∞'}")
    print()
    
    if commands_ok and chat_types_ok:
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã!")
        print()
        print("üí° –ò–ù–°–¢–†–£–ö–¶–ò–Ø –î–õ–Ø –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –í TELEGRAM:")
        print("1. –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø—É —Å —Ç–æ–ø–∏–∫–∞–º–∏")
        print("2. –û—Ç–∫–ª—é—á–∏—Ç–µ Privacy Mode —É –±–æ—Ç–∞ –≤ @BotFather")
        print("3. –°–¥–µ–ª–∞–π—Ç–µ –±–æ—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –≥—Ä—É–ø–ø—ã")
        print("4. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –≤ —Ç–æ–ø–∏–∫–∞—Ö:")
        print("   ‚Ä¢ –ù–∞–ø–∏—à–∏—Ç–µ /menu")
        print("   ‚Ä¢ –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –∫–æ–º–∞–Ω–¥—ã (–¥–æ–ª–∂–Ω–∞ —Å—Ç–∞—Ç—å /menu@botusername)")
        print("   ‚Ä¢ –û–±–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –¥–æ–ª–∂–Ω—ã —Ä–∞–±–æ—Ç–∞—Ç—å!")
    else:
        print("‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏")
        print("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–µ—Ä—Å–∏—é aiogram –∏ –æ–±–Ω–æ–≤–∏—Ç–µ –∫–æ–¥")

if __name__ == "__main__":
    asyncio.run(main())
