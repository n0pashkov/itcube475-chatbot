"""
–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Ö–µ–Ω–¥–ª–µ—Ä—ã –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
"""
import asyncio
import aiosqlite
from datetime import datetime, timedelta
from aiogram import Router, F
from aiogram.filters import Command, StateFilter
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.types import InlineKeyboardButton

from database import db
from chat_handler import ChatType, ChatBehavior, require_permission
from enhanced_keyboards import (
    get_admin_requests_keyboard, get_statistics_keyboard, 
    get_settings_keyboard, get_quick_actions_for_request,
    get_request_detail_keyboard
)
from keyboards import (
    get_admin_management_keyboard, get_teacher_management_keyboard,
    get_notification_settings_keyboard
)

admin_router = Router()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∞–¥–º–∏–Ω—Å–∫–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π
class AdminStates(StatesGroup):
    waiting_for_request_search = State()
    waiting_for_broadcast_message = State()
    waiting_for_request_reply = State()
    waiting_for_request_answer = State()

# –û—Å–Ω–æ–≤–Ω—ã–µ –∞–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã

@admin_router.message(F.text == "üé´ –ó–∞—è–≤–∫–∏")
@require_permission("view_requests")
async def admin_requests_menu(message: Message, **kwargs):
    """–ú–µ–Ω—é —Ä–∞–±–æ—Ç—ã —Å –∑–∞—è–≤–∫–∞–º–∏"""
    text = (
        "üé´ *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∞–º–∏*\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )
    
    await message.answer(
        text,
        parse_mode="Markdown",
        reply_markup=get_admin_requests_keyboard()
    )

@admin_router.message(F.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
@require_permission("statistics")
async def admin_statistics_menu(message: Message, **kwargs):
    """–ú–µ–Ω—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    chat_type = await ChatBehavior.determine_chat_type(message)
    
    text = (
        "üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ IT-Cube Bot*\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:"
    )
    
    await message.answer(
        text,
        parse_mode="Markdown",
        reply_markup=get_statistics_keyboard(chat_type)
    )

@admin_router.message(F.text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
@require_permission("admin_management")
async def admin_settings_menu(message: Message, **kwargs):
    """–ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    chat_type = await ChatBehavior.determine_chat_type(message)
    
    text = (
        "‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞*\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –Ω–∞—Å—Ç—Ä–æ–µ–∫:"
    )
    
    await message.answer(
        text,
        parse_mode="Markdown",
        reply_markup=get_settings_keyboard(chat_type)
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞—è–≤–æ–∫

@admin_router.callback_query(F.data == "requests_active")
async def show_active_requests(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞—è–≤–∫–∏ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º"""
    active_requests = await get_active_requests_detailed()
    
    if not active_requests:
        text = "üé´ <b>–ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞—è–≤–∫–∏</b>\n\n‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫ –Ω–µ—Ç!"
        keyboard = get_admin_requests_keyboard()
    else:
        text = "üé´ <b>–ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞—è–≤–∫–∏</b>\n\n"
        builder = InlineKeyboardBuilder()
        
        for request in active_requests[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 5 –¥–ª—è –ª—É—á—à–µ–≥–æ UX
            request_id, user_id, username, first_name, message_text, created_at, direction_name = request
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
            created_date = datetime.fromisoformat(created_at).strftime("%d.%m %H:%M")
            user_display = f"@{username}" if username else f"ID{user_id}"
            
            # –û–±—Ä–µ–∑–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º HTML —Å–∏–º–≤–æ–ª—ã
            short_message = message_text[:40] + "..." if len(message_text) > 40 else message_text
            short_message = escape_html(short_message)
            
            text += f"üìù <b>#{request_id}</b> ({created_date})\n"
            text += f"üë§ {user_display}\n"
            text += f"üìö {direction_name or '–ë–µ–∑ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è'}\n"
            text += f"üí¨ {short_message}\n\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–∞–∂–¥–æ–π –∑–∞—è–≤–∫–∏
            builder.add(InlineKeyboardButton(
                text=f"üìù #{request_id} - {user_display[:15]}",
                callback_data=f"request_detail:{request_id}"
            ))

        
        if len(active_requests) > 5:
            text += f"... –∏ –µ—â–µ {len(active_requests) - 5} –∑–∞—è–≤–æ–∫\n\n"
            text += "üí° –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∑–∞—è–≤–∫—É –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        builder.add(InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="requests_active"))
        builder.add(InlineKeyboardButton(text="‚¨ÖÔ∏è –ö –º–µ–Ω—é –∑–∞—è–≤–æ–∫", callback_data="requests_menu"))
        
        builder.adjust(1)  # –ö–∞–∂–¥–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ
        keyboard = builder.as_markup()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –ª–∏ –Ω–æ–≤–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ
    try:
        await callback.message.edit_text(text, parse_mode="HTML", reply_markup=keyboard)
    except Exception as e:
        if "message is not modified" in str(e):
            # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, –ø—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
            await callback.answer("‚úÖ –°–ø–∏—Å–æ–∫ –∞–∫—Ç—É–∞–ª–µ–Ω")
        else:
            # –ï—Å–ª–∏ –¥—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞, –ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –µ—ë –¥–∞–ª—å—à–µ
            raise e
    else:
        await callback.answer()

@admin_router.callback_query(F.data == "requests_closed")
async def show_closed_requests(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–∫—Ä—ã—Ç—ã–µ –∑–∞—è–≤–∫–∏"""
    closed_requests = await get_closed_requests_summary()
    
    # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º HTML —Å–∏–º–≤–æ–ª—ã –≤ —Ç–µ–∫—Å—Ç–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    closed_requests_safe = escape_html(closed_requests)
    
    text = (
        "üîí <b>–ó–∞–∫—Ä—ã—Ç—ã–µ –∑–∞—è–≤–∫–∏</b>\n\n"
        f"{closed_requests_safe}\n\n"
        "üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /msg ID_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏—Å—Ç–æ—Ä–∏–∏"
    )
    
    await callback.message.edit_text(text, parse_mode="HTML")
    await callback.answer()

@admin_router.callback_query(F.data == "requests_search")
async def start_request_search(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫ –∑–∞—è–≤–æ–∫ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    await callback.message.answer(
        "üîç *–ü–æ–∏—Å–∫ –∑–∞—è–≤–æ–∫*\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ username (—Å @) –¥–ª—è –ø–æ–∏—Å–∫–∞ –µ–≥–æ –∑–∞—è–≤–æ–∫:",
        parse_mode="Markdown"
    )
    await state.set_state(AdminStates.waiting_for_request_search)
    await callback.answer()

@admin_router.message(StateFilter(AdminStates.waiting_for_request_search))
async def process_request_search(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –ø–æ–∏—Å–∫ –∑–∞—è–≤–æ–∫"""
    search_query = message.text.strip()
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø–æ–∏—Å–∫–∞
    if search_query.startswith('@'):
        # –ü–æ–∏—Å–∫ –ø–æ username
        username = search_query[1:]
        user_requests = await get_requests_by_username(username)
        search_type = f"username @{username}"
    else:
        try:
            # –ü–æ–∏—Å–∫ –ø–æ ID
            user_id = int(search_query)
            user_requests = await get_requests_by_user_id(user_id)
            search_type = f"ID {user_id}"
        except ValueError:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ ID (—á–∏—Å–ª–æ) –∏–ª–∏ @username")
            return
    
    if not user_requests:
        await message.answer(f"üîç –ü–æ –∑–∞–ø—Ä–æ—Å—É '{search_type}' –∑–∞—è–≤–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
    else:
        text = f"üîç <b>–ó–∞—è–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b> ({search_type})\n\n"
        
        for request in user_requests[:15]:  # –ü–µ—Ä–≤—ã–µ 15 –∑–∞—è–≤–æ–∫
            request_id, message_text, created_at, status, direction_name = request
            
            created_date = datetime.fromisoformat(created_at).strftime("%d.%m.%Y %H:%M")
            status_emoji = "üîì" if status == 'active' else "üîí"
            short_message = message_text[:40] + "..." if len(message_text) > 40 else message_text
            short_message = escape_html(short_message)
            
            text += f"{status_emoji} <b>#{request_id}</b> ({created_date})\n"
            text += f"üìö {direction_name or '–ë–µ–∑ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è'}\n"
            text += f"üí¨ {short_message}\n\n"
        
        if len(user_requests) > 15:
            text += f"... –∏ –µ—â–µ {len(user_requests) - 15} –∑–∞—è–≤–æ–∫\n\n"
        
        text += f"üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /msg {search_query} –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –ø–µ—Ä–µ–ø–∏—Å–∫–∏"
        
        await message.answer(text, parse_mode="HTML")
    
    await state.clear()

# –ù–æ–≤—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ –∑–∞—è–≤–æ–∫

@admin_router.callback_query(F.data == "requests_menu")
async def requests_menu_callback(callback: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∑–∞—è–≤–æ–∫"""
    text = (
        "üé´ *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∞–º–∏*\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )
    
    await callback.message.edit_text(
        text,
        parse_mode="Markdown",
        reply_markup=get_admin_requests_keyboard()
    )
    await callback.answer()

@admin_router.callback_query(F.data.startswith("request_detail:"))
async def show_request_detail(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞—è–≤–∫–µ"""
    request_id = int(callback.data.split(":")[1])

    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞—è–≤–∫–µ
    request_info = await get_request_detailed_info(request_id)
    
    if not request_info:
        await callback.answer("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return
    
    request_id, user_id, username, first_name, message_text, created_at, direction_name, status = request_info
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
    created_date = datetime.fromisoformat(created_at).strftime("%d.%m.%Y %H:%M")
    user_display = f"@{username}" if username else f"ID{user_id}"
    status_emoji = "üîì" if status == "active" else "üîí"
    
    text = f"üìù <b>–ó–∞—è–≤–∫–∞ #{request_id}</b>\n\n"
    text += f"{status_emoji} <b>–°—Ç–∞—Ç—É—Å:</b> {'–ê–∫—Ç–∏–≤–Ω–∞—è' if status == 'active' else '–ó–∞–∫—Ä—ã—Ç–∞—è'}\n"
    text += f"üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {user_display}\n"
    text += f"üìÖ <b>–°–æ–∑–¥–∞–Ω–∞:</b> {created_date}\n"
    text += f"üìö <b>–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:</b> {direction_name or '–ë–µ–∑ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è'}\n\n"
    text += f"üí¨ <b>–°–æ–æ–±—â–µ–Ω–∏–µ:</b>\n{escape_html(message_text)}"
    
    is_active = status == "active"
    keyboard = get_request_detail_keyboard(request_id, user_id, is_active)
    
    await callback.message.edit_text(text, parse_mode="HTML", reply_markup=keyboard)
    await callback.answer()

@admin_router.callback_query(F.data == "requests_by_direction")
async def show_requests_by_direction(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞—è–≤–∫–∏ —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º"""
    directions_stats = await get_requests_by_directions()
    
    if not directions_stats:
        text = "üìä <b>–ó–∞—è–≤–∫–∏ –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º</b>\n\n‚úÖ –ó–∞—è–≤–æ–∫ –Ω–µ—Ç!"
    else:
        text = "üìä <b>–ó–∞—è–≤–∫–∏ –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º</b>\n\n"
        for direction_name, active_count, total_count in directions_stats:
            direction_display = direction_name or "–ë–µ–∑ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è"
            text += f"üìö <b>{direction_display}</b>\n"
            text += f"   üîì –ê–∫—Ç–∏–≤–Ω—ã—Ö: {active_count}\n"
            text += f"   üìä –í—Å–µ–≥–æ: {total_count}\n\n"
    
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text="‚¨ÖÔ∏è –ö –º–µ–Ω—é –∑–∞—è–≤–æ–∫", callback_data="requests_menu"))
    
    await callback.message.edit_text(text, parse_mode="HTML", reply_markup=builder.as_markup())
    await callback.answer()

@admin_router.callback_query(F.data == "requests_recent")
async def show_recent_requests(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –Ω–µ–¥–∞–≤–Ω–∏–µ –∑–∞—è–≤–∫–∏ (–∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞)"""
    recent_requests = await get_recent_requests()
    
    if not recent_requests:
        text = "‚è∞ <b>–ù–µ–¥–∞–≤–Ω–∏–µ –∑–∞—è–≤–∫–∏</b>\n\n‚úÖ –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞ –∑–∞—è–≤–æ–∫ –Ω–µ—Ç!"
    else:
        text = "‚è∞ <b>–ù–µ–¥–∞–≤–Ω–∏–µ –∑–∞—è–≤–∫–∏ (24 —á–∞—Å–∞)</b>\n\n"
        builder = InlineKeyboardBuilder()
        
        for request in recent_requests[:10]:
            request_id, user_id, username, first_name, message_text, created_at, direction_name = request
            
            created_date = datetime.fromisoformat(created_at).strftime("%H:%M")
            user_display = f"@{username}" if username else f"ID{user_id}"
            short_message = message_text[:30] + "..." if len(message_text) > 30 else message_text
            
            text += f"üìù <b>#{request_id}</b> ({created_date})\n"
            text += f"üë§ {user_display} | üìö {direction_name or '–ë–µ–∑ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è'}\n"
            text += f"üí¨ {escape_html(short_message)}\n\n"
            
            builder.add(InlineKeyboardButton(
                text=f"üìù #{request_id} - {user_display[:10]}",
                callback_data=f"request_detail:{request_id}"
            ))
    
    builder.add(InlineKeyboardButton(text="‚¨ÖÔ∏è –ö –º–µ–Ω—é –∑–∞—è–≤–æ–∫", callback_data="requests_menu"))
    builder.adjust(1)
    
    await callback.message.edit_text(text, parse_mode="HTML", reply_markup=builder.as_markup())
    await callback.answer()



@admin_router.callback_query(F.data.startswith("reply_request:"))
async def reply_request_callback(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∑–∞—è–≤–∫—É"""
    request_id = int(callback.data.split(":")[1])
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞—è–≤–∫–µ
    request_info = await get_request_detailed_info(request_id)
    if not request_info:
        await callback.answer("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∑–∞—è–≤–∫–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.update_data(request_id=request_id)
    await state.set_state(AdminStates.waiting_for_request_answer)
    
    user_display = f"@{request_info[2]}" if request_info[2] else f"ID{request_info[1]}"
    
    await callback.message.answer(
        f"üí¨ *–û—Ç–≤–µ—Ç –Ω–∞ –∑–∞—è–≤–∫—É #{request_id}*\n\n"
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_display}\n"
        f"üìù –ó–∞—è–≤–∫–∞: {request_info[4][:100]}{'...' if len(request_info[4]) > 100 else ''}\n\n"
        f"‚úçÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç:",
        parse_mode="Markdown"
    )
    await callback.answer()

@admin_router.message(StateFilter(AdminStates.waiting_for_request_answer))
async def process_request_answer(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ—Ç–≤–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –Ω–∞ –∑–∞—è–≤–∫—É"""
    data = await state.get_data()
    request_id = data.get('request_id')
    
    if not request_id:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: ID –∑–∞—è–≤–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        await state.clear()
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞—è–≤–∫–µ
    request_info = await get_request_detailed_info(request_id)
    if not request_info:
        await message.answer("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        await state.clear()
        return
    
    user_id = request_info[1]
    admin_reply = message.text
    admin_id = message.from_user.id
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    try:
        await message.bot.send_message(
            user_id,
            f"‚úÖ *–û—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à—É –∑–∞—è–≤–∫—É #{request_id}*\n\n"
            f"üë§ *–û—Ç–≤–µ—Ç–∏–ª:* –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä\n"
            f"üìã *–°—Ç–∞—Ç—É—Å:* –ó–∞—è–≤–∫–∞ –∑–∞–∫—Ä—ã—Ç–∞\n\n"
            f"üí¨ *–í–∞—à–∞ –∑–∞—è–≤–∫–∞:*\n{request_info[4]}\n\n"
            f"üìù *–û—Ç–≤–µ—Ç:*\n{admin_reply}\n\n"
            f"üí° –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ.",
            parse_mode="Markdown"
        )
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –∑–∞—è–≤–∫—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        success = await db.close_request(request_id)
        
        if success:
            await message.answer(
                f"‚úÖ *–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!*\n\n"
                f"üìù –ó–∞—è–≤–∫–∞ #{request_id} –∑–∞–∫—Ä—ã—Ç–∞\n"
                f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–≤–µ–¥–æ–º–ª–µ–Ω",
                parse_mode="Markdown"
            )
        else:
            await message.answer(
                f"‚ö†Ô∏è *–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω, –Ω–æ –∑–∞—è–≤–∫–∞ –Ω–µ –∑–∞–∫—Ä—ã—Ç–∞ –≤ –ë–î*\n\n"
                f"–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–º—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É",
                parse_mode="Markdown"
            )
            
    except Exception as e:
        await message.answer(
            f"‚ùå *–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞*\n\n"
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞ –∏–ª–∏ —É–¥–∞–ª–∏–ª –∞–∫–∫–∞—É–Ω—Ç.\n"
            f"–û—à–∏–±–∫–∞: {str(e)}",
            parse_mode="Markdown"
        )
    
    await state.clear()

@admin_router.callback_query(F.data.startswith("close_request:"))
async def close_request_callback(callback: CallbackQuery):
    """–ó–∞–∫—Ä—ã—Ç—å –∑–∞—è–≤–∫—É"""
    request_id = int(callback.data.split(":")[1])
    
    # –ó–∞–∫—Ä—ã–≤–∞–µ–º –∑–∞—è–≤–∫—É
    success = await db.close_request(request_id)
    
    if success:
        await callback.answer("‚úÖ –ó–∞—è–≤–∫–∞ –∑–∞–∫—Ä—ã—Ç–∞", show_alert=True)
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞—è–≤–∫–µ
        await show_request_detail(callback)
    else:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –∑–∞—è–≤–∫–∏", show_alert=True)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫

@admin_router.callback_query(F.data == "settings_admins")
async def settings_admins_callback(callback: CallbackQuery):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º–∏ –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    if not await db.is_admin(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.", show_alert=True)
        return
    
    await callback.message.edit_text(
        "üë• *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏*\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        parse_mode="Markdown",
        reply_markup=get_admin_management_keyboard()
    )
    await callback.answer()

@admin_router.callback_query(F.data == "settings_teachers")
async def settings_teachers_callback(callback: CallbackQuery):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è–º–∏ –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    if not await db.is_admin(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.", show_alert=True)
        return
    
    await callback.message.edit_text(
        "üë®‚Äçüè´ *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è–º–∏*\n\n"
        "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è–º–∏ –∏ –∏—Ö –ø—Ä–∏–≤—è–∑–∫–∞–º–∏ –∫ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º.\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        parse_mode="Markdown",
        reply_markup=get_teacher_management_keyboard()
    )
    await callback.answer()

@admin_router.callback_query(F.data == "settings_notifications")
async def settings_notifications_callback(callback: CallbackQuery):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    if not await db.is_admin(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.", show_alert=True)
        return
    
    await callback.message.edit_text(
        "üì¢ *–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π*\n\n"
        "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å —á–∞—Ç–∞–º–∏, –≤ –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏.\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        parse_mode="Markdown",
        reply_markup=get_notification_settings_keyboard()
    )
    await callback.answer()

@admin_router.callback_query(F.data == "settings_requests")
async def settings_requests_callback(callback: CallbackQuery):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞—è–≤–æ–∫"""
    if not await db.is_admin(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.", show_alert=True)
        return
    
    text = (
        "üé´ *–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞—è–≤–æ–∫*\n\n"
        "üîß –†–∞–∑–¥–µ–ª –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.\n\n"
        "–ü–ª–∞–Ω–∏—Ä—É–µ–º—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:\n"
        "‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ —Å—Ç–∞—Ä—ã—Ö –∑–∞—è–≤–æ–∫\n"
        "‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–≤–µ—Ç–∞\n"
        "‚Ä¢ –®–∞–±–ª–æ–Ω—ã –æ—Ç–≤–µ—Ç–æ–≤\n"
        "‚Ä¢ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –∑–∞—è–≤–æ–∫"
    )
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—É—é –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
    from aiogram.utils.keyboard import InlineKeyboardBuilder
    from aiogram.types import InlineKeyboardButton
    
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", callback_data="back_to_settings"))
    
    await callback.message.edit_text(
        text,
        parse_mode="Markdown",
        reply_markup=builder.as_markup()
    )
    await callback.answer()

@admin_router.callback_query(F.data == "settings_schedule")
async def settings_schedule_callback(callback: CallbackQuery):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"""
    if not await db.is_admin(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.", show_alert=True)
        return
    
    text = (
        "üìÖ *–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è*\n\n"
        "üîß –†–∞–∑–¥–µ–ª –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.\n\n"
        "–ü–ª–∞–Ω–∏—Ä—É–µ–º—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:\n"
        "‚Ä¢ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è\n"
        "‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏\n"
        "‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö\n"
        "‚Ä¢ –≠–∫—Å–ø–æ—Ä—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"
    )
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—É—é –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
    from aiogram.utils.keyboard import InlineKeyboardBuilder
    from aiogram.types import InlineKeyboardButton
    
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", callback_data="back_to_settings"))
    
    await callback.message.edit_text(
        text,
        parse_mode="Markdown",
        reply_markup=builder.as_markup()
    )
    await callback.answer()

@admin_router.callback_query(F.data == "back_to_settings")
async def back_to_settings_callback(callback: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º"""
    if not await db.is_admin(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.", show_alert=True)
        return
    
    from chat_handler import ChatBehavior
    chat_type = await ChatBehavior.determine_chat_type(callback.message)
    
    text = (
        "‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞*\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –Ω–∞—Å—Ç—Ä–æ–µ–∫:"
    )
    
    await callback.message.edit_text(
        text,
        parse_mode="Markdown",
        reply_markup=get_settings_keyboard(chat_type)
    )
    await callback.answer()

# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞

@admin_router.callback_query(F.data == "stats_general")
async def show_general_statistics(callback: CallbackQuery):
    """–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"""
    stats = await get_general_statistics()
    
    await callback.message.edit_text(
        stats,
        parse_mode="Markdown"
    )
    await callback.answer()

@admin_router.callback_query(F.data == "stats_requests")
async def show_requests_statistics(callback: CallbackQuery):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞—è–≤–æ–∫"""
    stats = await get_requests_statistics()
    
    await callback.message.edit_text(
        stats,
        parse_mode="Markdown"
    )
    await callback.answer()

@admin_router.callback_query(F.data == "stats_users")
async def show_users_statistics(callback: CallbackQuery):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    stats = await get_users_statistics()
    
    await callback.message.edit_text(
        stats,
        parse_mode="Markdown"
    )
    await callback.answer()

@admin_router.callback_query(F.data == "stats_directions")
async def show_directions_statistics(callback: CallbackQuery):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º"""
    stats = await get_directions_statistics()
    
    await callback.message.edit_text(
        stats,
        parse_mode="Markdown"
    )
    await callback.answer()

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∞–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã

@admin_router.message(Command("broadcast"))
@require_permission("admin_management")
async def start_broadcast(message: Message, state: FSMContext, **kwargs):
    """–†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
    if not await db.is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    await message.answer(
        "üì¢ *–†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è*\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç —Ä–∞–∑–æ—Å–ª–∞–Ω–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –±–æ—Ç–∞.\n\n"
        "‚ö†Ô∏è *–í–Ω–∏–º–∞–Ω–∏–µ:* –†–∞—Å—Å—ã–ª–∫–∞ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º, –∫–æ—Ç–æ—Ä—ã–µ –∫–æ–≥–¥–∞-–ª–∏–±–æ –ø–∏—Å–∞–ª–∏ –±–æ—Ç—É!\n\n"
        "–î–ª—è –æ—Ç–º–µ–Ω—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel",
        parse_mode="Markdown"
    )
    await state.set_state(AdminStates.waiting_for_broadcast_message)

@admin_router.message(StateFilter(AdminStates.waiting_for_broadcast_message))
async def process_broadcast(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É"""
    if message.text == "/cancel":
        await message.answer("‚ùå –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        await state.clear()
        return
    
    broadcast_text = message.text
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    users = await get_all_bot_users()
    
    if not users:
        await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        await state.clear()
        return
    
    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏
    confirm_text = (
        f"üì¢ *–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏*\n\n"
        f"üë• *–ü–æ–ª—É—á–∞—Ç–µ–ª–µ–π:* {len(users)}\n\n"
        f"üìù *–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:*\n{broadcast_text}\n\n"
        f"‚ùì –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É?"
    )
    
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text="‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data="confirm_broadcast"))
    builder.add(InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_broadcast"))
    builder.adjust(2)
    
    await message.answer(confirm_text, parse_mode="Markdown", reply_markup=builder.as_markup())
    await state.update_data(broadcast_text=broadcast_text, users=users)

@admin_router.callback_query(F.data == "confirm_broadcast")
async def confirm_broadcast(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É"""
    data = await state.get_data()
    broadcast_text = data.get('broadcast_text')
    users = data.get('users', [])
    
    await callback.message.edit_text("üì§ –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É...")
    
    success_count = 0
    error_count = 0
    
    for user_id in users:
        try:
            await callback.bot.send_message(
                user_id,
                f"üì¢ *–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏ IT-Cube*\n\n{broadcast_text}",
                parse_mode="Markdown"
            )
            success_count += 1
            await asyncio.sleep(0.05)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤
        except Exception:
            error_count += 1
    
    result_text = (
        f"üìä *–†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—Å—Å—ã–ª–∫–∏*\n\n"
        f"‚úÖ *–£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:* {success_count}\n"
        f"‚ùå *–û—à–∏–±–æ–∫:* {error_count}\n"
        f"üë• *–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:* {len(users)}"
    )
    
    await callback.message.edit_text(result_text, parse_mode="Markdown")
    await state.clear()

@admin_router.callback_query(F.data == "cancel_broadcast")
async def cancel_broadcast(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É"""
    await callback.message.edit_text("‚ùå –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    await state.clear()

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏

def escape_markdown(text: str) -> str:
    """–≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã markdown"""
    if not text:
        return ""
    
    # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∫—Ä–∏—Ç–∏—á–Ω—ã–µ markdown —Å–∏–º–≤–æ–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –Ω–∞—Ä—É—à–∏—Ç—å —Ä–∞–∑–º–µ—Ç–∫—É
    # –£–±–∏—Ä–∞–µ–º —Ç–æ—á–∫–∏ –∏ –¥—Ä—É–≥–∏–µ —Å–∏–º–≤–æ–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ —Ä–µ–¥–∫–æ –≤—ã–∑—ã–≤–∞—é—Ç –ø—Ä–æ–±–ª–µ–º—ã
    escape_chars = ['*', '_', '[', ']', '`', '~', '>', '#', '+', '-', '=', '|', '{', '}', '!', '\\']
    for char in escape_chars:
        text = text.replace(char, f'\\{char}')
    
    return text

def escape_html(text: str) -> str:
    """–≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞—Ç—å HTML —Å–∏–º–≤–æ–ª—ã"""
    if not text:
        return ""
    
    # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º HTML —Å–∏–º–≤–æ–ª—ã –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    text = text.replace('&', '&amp;')
    text = text.replace('<', '&lt;')
    text = text.replace('>', '&gt;')
    text = text.replace('"', '&quot;')
    text = text.replace("'", '&#x27;')
    
    return text

async def get_active_requests_detailed():
    """–ü–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–∫–∞—Ö"""
    try:
        async with aiosqlite.connect(db.db_path) as conn:
            cursor = await conn.execute('''
                SELECT fm.id, fm.user_id, fm.username, fm.first_name, 
                       fm.message_text, fm.created_at, d.name as direction_name
                FROM feedback_messages fm
                LEFT JOIN directions d ON fm.direction_id = d.id
                WHERE fm.status = 'active'
                ORDER BY fm.created_at DESC
            ''')
            return await cursor.fetchall()
    except Exception:
        return []

async def get_closed_requests_summary():
    """–ü–æ–ª—É—á–∏—Ç—å —Å–≤–æ–¥–∫—É –∑–∞–∫—Ä—ã—Ç—ã—Ö –∑–∞—è–≤–æ–∫"""
    try:
        async with aiosqlite.connect(db.db_path) as conn:
            cursor = await conn.execute('''
                SELECT COUNT(*) as total,
                       COUNT(CASE WHEN answered_at > datetime('now', '-1 day') THEN 1 END) as today,
                       COUNT(CASE WHEN answered_at > datetime('now', '-7 days') THEN 1 END) as week
                FROM feedback_messages 
                WHERE status = 'closed'
            ''')
            stats = await cursor.fetchone()
            
            if not stats:
                return "üìä –ó–∞–∫—Ä—ã—Ç—ã—Ö –∑–∞—è–≤–æ–∫ –Ω–µ—Ç"
            
            total, today, week = stats
            
            text = f"üìä –í—Å–µ–≥–æ –∑–∞–∫—Ä—ã—Ç–æ: {total}\n"
            text += f"üìÖ –ó–∞ —Å–µ–≥–æ–¥–Ω—è: {today}\n"
            text += f"üìÖ –ó–∞ –Ω–µ–¥–µ–ª—é: {week}"
            
            return text
            
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {str(e)}"

async def get_requests_by_username(username: str):
    """–ü–æ–ª—É—á–∏—Ç—å –∑–∞—è–≤–∫–∏ –ø–æ username"""
    try:
        async with aiosqlite.connect(db.db_path) as conn:
            cursor = await conn.execute('''
                SELECT fm.id, fm.message_text, fm.created_at, fm.status, d.name as direction_name
                FROM feedback_messages fm
                LEFT JOIN directions d ON fm.direction_id = d.id
                WHERE fm.username = ?
                ORDER BY fm.created_at DESC
            ''', (username,))
            return await cursor.fetchall()
    except Exception:
        return []

async def get_requests_by_user_id(user_id: int):
    """–ü–æ–ª—É—á–∏—Ç—å –∑–∞—è–≤–∫–∏ –ø–æ user_id"""
    try:
        async with aiosqlite.connect(db.db_path) as conn:
            cursor = await conn.execute('''
                SELECT fm.id, fm.message_text, fm.created_at, fm.status, d.name as direction_name
                FROM feedback_messages fm
                LEFT JOIN directions d ON fm.direction_id = d.id
                WHERE fm.user_id = ?
                ORDER BY fm.created_at DESC
            ''', (user_id,))
            return await cursor.fetchall()
    except Exception:
        return []

async def get_general_statistics():
    """–ü–æ–ª—É—á–∏—Ç—å –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
    try:
        async with aiosqlite.connect(db.db_path) as conn:
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞—è–≤–æ–∫
            cursor = await conn.execute('''
                SELECT 
                    COUNT(*) as total_requests,
                    COUNT(CASE WHEN status = 'active' THEN 1 END) as active_requests,
                    COUNT(CASE WHEN created_at > datetime('now', '-1 day') THEN 1 END) as today_requests,
                    COUNT(CASE WHEN created_at > datetime('now', '-7 days') THEN 1 END) as week_requests
                FROM feedback_messages
            ''')
            request_stats = await cursor.fetchone()
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            cursor = await conn.execute('''
                SELECT 
                    COUNT(DISTINCT user_id) as total_users,
                    COUNT(DISTINCT CASE WHEN created_at > datetime('now', '-30 days') THEN user_id END) as active_users
                FROM feedback_messages
            ''')
            user_stats = await cursor.fetchone()
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–¥–º–∏–Ω–æ–≤ –∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π
            cursor = await conn.execute('SELECT COUNT(*) FROM admins')
            admin_count = (await cursor.fetchone())[0]
            
            cursor = await conn.execute('SELECT COUNT(*) FROM teachers WHERE is_active = TRUE')
            teacher_count = (await cursor.fetchone())[0]
            
            if not request_stats:
                return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"
            
            total_req, active_req, today_req, week_req = request_stats
            total_users, active_users = user_stats if user_stats else (0, 0)
            
            text = "üìä *–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ IT-Cube Bot*\n\n"
            
            text += "üé´ *–ó–∞—è–≤–∫–∏:*\n"
            text += f"‚Ä¢ –í—Å–µ–≥–æ: {total_req}\n"
            text += f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {active_req}\n"
            text += f"‚Ä¢ –ó–∞ —Å–µ–≥–æ–¥–Ω—è: {today_req}\n"
            text += f"‚Ä¢ –ó–∞ –Ω–µ–¥–µ–ª—é: {week_req}\n\n"
            
            text += "üë• *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:*\n"
            text += f"‚Ä¢ –í—Å–µ–≥–æ: {total_users}\n"
            text += f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞ –º–µ—Å—è—Ü: {active_users}\n\n"
            
            text += "üëë *–ü–µ—Ä—Å–æ–Ω–∞–ª:*\n"
            text += f"‚Ä¢ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: {admin_count}\n"
            text += f"‚Ä¢ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π: {teacher_count}\n\n"
            
            if total_req > 0:
                response_rate = round(((total_req - active_req) / total_req) * 100, 1)
                text += f"üìà *–ü—Ä–æ—Ü–µ–Ω—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞—è–≤–æ–∫:* {response_rate}%"
            
            return text
            
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}"

async def get_requests_statistics():
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞—è–≤–æ–∫"""
    # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –¥–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞—è–≤–æ–∫
    return "üé´ *–ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞—è–≤–æ–∫ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞*"

async def get_users_statistics():
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    # –ó–¥–µ—Å—å –±—É–¥–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    return "üë• *–ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞*"

async def get_directions_statistics():
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º"""
    try:
        async with aiosqlite.connect(db.db_path) as conn:
            cursor = await conn.execute('''
                SELECT d.name, COUNT(fm.id) as request_count,
                       COUNT(CASE WHEN fm.status = 'active' THEN 1 END) as active_count
                FROM directions d
                LEFT JOIN feedback_messages fm ON d.id = fm.direction_id
                GROUP BY d.id, d.name
                ORDER BY request_count DESC
            ''')
            direction_stats = await cursor.fetchall()
            
            if not direction_stats:
                return "üìö *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º*\n\n‚ùå –î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
            
            text = "üìö *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º*\n\n"
            
            for direction_name, total, active in direction_stats:
                text += f"üìñ *{direction_name}*\n"
                text += f"‚Ä¢ –í—Å–µ–≥–æ –∑–∞—è–≤–æ–∫: {total}\n"
                text += f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {active}\n\n"
            
            return text
            
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}"

async def get_all_bot_users():
    """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–æ—Ç–∞"""
    try:
        async with aiosqlite.connect(db.db_path) as conn:
            cursor = await conn.execute('SELECT DISTINCT user_id FROM feedback_messages')
            users = await cursor.fetchall()
            return [user[0] for user in users]
    except Exception:
        return []

# –ù–æ–≤—ã–µ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ –∑–∞—è–≤–æ–∫

async def get_request_detailed_info(request_id: int):
    """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞—è–≤–∫–µ"""
    try:
        async with aiosqlite.connect(db.db_path) as conn:
            cursor = await conn.execute('''
                SELECT fm.id, fm.user_id, fm.username, fm.first_name, fm.message_text, 
                       fm.created_at, d.name as direction_name, fm.status
                FROM feedback_messages fm
                LEFT JOIN directions d ON fm.direction_id = d.id
                WHERE fm.id = ?
            ''', (request_id,))
            result = await cursor.fetchone()
            return result
    except Exception as e:
        return None

async def get_requests_by_directions():
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞—è–≤–æ–∫ –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º"""
    try:
        async with aiosqlite.connect(db.db_path) as conn:
            cursor = await conn.execute('''
                SELECT 
                    COALESCE(d.name, '–ë–µ–∑ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è') as direction_name,
                    COUNT(CASE WHEN fm.status = 'active' THEN 1 END) as active_count,
                    COUNT(*) as total_count
                FROM feedback_messages fm
                LEFT JOIN directions d ON fm.direction_id = d.id
                GROUP BY d.name
                ORDER BY total_count DESC
            ''')
            return await cursor.fetchall()
    except Exception:
        return []

async def get_recent_requests():
    """–ü–æ–ª—É—á–∏—Ç—å –Ω–µ–¥–∞–≤–Ω–∏–µ –∑–∞—è–≤–∫–∏ (–∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞)"""
    try:
        async with aiosqlite.connect(db.db_path) as conn:
            cursor = await conn.execute('''
                SELECT fm.id, fm.user_id, fm.username, fm.first_name, fm.message_text, 
                       fm.created_at, d.name as direction_name
                FROM feedback_messages fm
                LEFT JOIN directions d ON fm.direction_id = d.id
                WHERE fm.created_at > datetime('now', '-1 day')
                ORDER BY fm.created_at DESC
            ''')
            return await cursor.fetchall()
    except Exception:
        return []


