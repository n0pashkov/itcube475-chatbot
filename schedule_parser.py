import pandas as pd
from config import SCHEDULE_FILE
from typing import Dict, List, Tuple

class ScheduleParser:
    def __init__(self):
        self.schedule_data = None
        self.load_schedule()
    
    def load_schedule(self):
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏–∑ CSV —Ñ–∞–π–ª–∞"""
        try:
            self.schedule_data = pd.read_csv(SCHEDULE_FILE, encoding='utf-8')
            # –£–¥–∞–ª—è–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
            self.schedule_data = self.schedule_data.dropna(subset=['–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ'])
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: {e}")
            self.schedule_data = None
    
    def get_directions(self) -> List[str]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π"""
        if self.schedule_data is None:
            return []
        return self.schedule_data['–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ'].tolist()
    
    def get_direction_info(self, direction: str) -> Dict:
        """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏"""
        if self.schedule_data is None:
            return {}
        
        row = self.schedule_data[self.schedule_data['–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ'] == direction]
        if row.empty:
            return {}
        
        row = row.iloc[0]
        
        info = {
            '–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ': row['–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ'],
            '–ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å': row['–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å'],
            '–∫–∞–±–∏–Ω–µ—Ç': row['–ö–∞–±–∏–Ω–µ—Ç'],
            '–¥–Ω–∏': {}
        }
        
        # –î–Ω–∏ –Ω–µ–¥–µ–ª–∏ –≤ —Ç–æ–º –ø–æ—Ä—è–¥–∫–µ, –∫–∞–∫ –≤ —Ç–∞–±–ª–∏—Ü–µ
        days = ['–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–°—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä–≥', '–ü—è—Ç–Ω–∏—Ü–∞', '–°—É–±–±–æ—Ç–∞']
        
        for day in days:
            if day in row and pd.notna(row[day]) and str(row[day]).strip():
                # –ü–∞—Ä—Å–∏–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –¥–Ω—è
                schedule_text = str(row[day]).strip()
                info['–¥–Ω–∏'][day] = self._parse_day_schedule(schedule_text)
        
        return info
    
    def _parse_day_schedule(self, schedule_text: str) -> List[str]:
        """–ü–∞—Ä—Å–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –¥–Ω—è"""
        if not schedule_text:
            return []
        
        # –†–∞–∑–¥–µ–ª—è–µ–º –ø–æ –≥—Ä—É–ø–ø–∞–º, –µ—Å–ª–∏ –µ—Å—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ
        # –ò—â–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã —Ç–∏–ø–∞ "1–≥—Ä 14:00 - 14:45"
        groups = []
        
        # –ü—Ä–æ—Å—Ç–æ–µ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –ø–æ –ø—Ä–æ–±–µ–ª–∞–º –∏ –ø–æ–∏—Å–∫ –≥—Ä—É–ø–ø
        parts = schedule_text.split()
        current_group = []
        
        for part in parts:
            if '–≥—Ä' in part:
                if current_group:
                    groups.append(' '.join(current_group))
                current_group = [part]
            else:
                current_group.append(part)
        
        if current_group:
            groups.append(' '.join(current_group))
        
        return groups if groups else [schedule_text]
    
    def get_days_for_direction(self, direction: str) -> List[str]:
        """–ü–æ–ª—É—á–∏—Ç—å –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏ –¥–ª—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
        info = self.get_direction_info(direction)
        return list(info.get('–¥–Ω–∏', {}).keys())
    
    def format_direction_schedule(self, direction: str) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        info = self.get_direction_info(direction)
        
        if not info:
            return "–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
        
        text = f"üìö *{info['–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ']}*\n\n"
        text += f"üë®‚Äçüè´ *–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å:* {info['–ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å']}\n"
        text += f"üè¢ *–ö–∞–±–∏–Ω–µ—Ç:* {info['–∫–∞–±–∏–Ω–µ—Ç']}\n\n"
        
        if info['–¥–Ω–∏']:
            text += "*üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ:*\n\n"
            for day, schedule in info['–¥–Ω–∏'].items():
                text += f"*{day}:*\n"
                for group_schedule in schedule:
                    text += f"‚Ä¢ {group_schedule}\n"
                text += "\n"
        else:
            text += "–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –∑–∞–Ω—è—Ç–∏–π –Ω–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ"
        
        return text

# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –ø–∞—Ä—Å–µ—Ä–∞
schedule_parser = ScheduleParser()



