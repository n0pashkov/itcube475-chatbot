import pandas as pd
from config import SCHEDULE_FILE
from typing import Dict, List, Tuple
import os

class ScheduleParser:
    def __init__(self):
        self.schedule_data = None
        self.load_schedule()
    
    def load_schedule(self):
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏–∑ CSV —Ñ–∞–π–ª–∞"""
        try:
            self.schedule_data = pd.read_csv(SCHEDULE_FILE, encoding='utf-8')
            # –£–¥–∞–ª—è–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
            self.schedule_data = self.schedule_data.dropna(subset=['–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ'])
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: {e}")
            self.schedule_data = None
    
    def _find_schedule_sheet(self, file_path: str) -> Tuple[str, bool]:
        """–ù–∞–π—Ç–∏ –ª–∏—Å—Ç —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º –≤ XLSX —Ñ–∞–π–ª–µ"""
        try:
            xl_file = pd.ExcelFile(file_path, engine='openpyxl')
            required_columns = ['–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ', '–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å', '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–°—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä–≥', '–ü—è—Ç–Ω–∏—Ü–∞', '–°—É–±–±–æ—Ç–∞', '–ö–∞–±–∏–Ω–µ—Ç']
            
            for sheet_name in xl_file.sheet_names:
                try:
                    # –ß–∏—Ç–∞–µ–º –ª–∏—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
                    df = pd.read_excel(file_path, sheet_name=sheet_name, engine='openpyxl')
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –Ω—É–∂–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏
                    if df.shape[1] >= 9:  # –ú–∏–Ω–∏–º—É–º 9 –∫–æ–ª–æ–Ω–æ–∫
                        columns_lower = [str(col).lower() for col in df.columns]
                        required_lower = [col.lower() for col in required_columns]
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤—Å–µ –Ω—É–∂–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏
                        found_columns = []
                        for req in required_lower:
                            for col in columns_lower:
                                if req in col:
                                    found_columns.append(req)
                                    break
                        
                        if len(found_columns) >= 7:  # –ú–∏–Ω–∏–º—É–º 7 –∏–∑ 9 –∫–æ–ª–æ–Ω–æ–∫
                            print(f"–ù–∞–π–¥–µ–Ω –ø–æ–¥—Ö–æ–¥—è—â–∏–π –ª–∏—Å—Ç: '{sheet_name}' —Å –∫–æ–ª–æ–Ω–∫–∞–º–∏: {df.columns.tolist()}")
                            return sheet_name, True
                            
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ª–∏—Å—Ç–∞ '{sheet_name}': {e}")
                    continue
            
            return None, False
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ª–∏—Å—Ç–∞: {e}")
            return None, False
    
    def load_xlsx_schedule(self, file_path: str) -> bool:
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏–∑ XLSX —Ñ–∞–π–ª–∞"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
            if not file_path.lower().endswith('.xlsx'):
                return False
            
            # –ò—â–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–π –ª–∏—Å—Ç
            sheet_name, found = self._find_schedule_sheet(file_path)
            if not found:
                print("–ù–µ –Ω–∞–π–¥–µ–Ω –ø–æ–¥—Ö–æ–¥—è—â–∏–π –ª–∏—Å—Ç —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º")
                return False
            
            # –ß–∏—Ç–∞–µ–º XLSX —Ñ–∞–π–ª —Å –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –ª–∏—Å—Ç–∞
            self.schedule_data = pd.read_excel(file_path, sheet_name=sheet_name, engine='openpyxl')
            
            # –£–¥–∞–ª—è–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
            self.schedule_data = self.schedule_data.dropna(subset=['–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ'])
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ CSV –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            self.schedule_data.to_csv(SCHEDULE_FILE, index=False, encoding='utf-8')
            
            return True
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ XLSX —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: {e}")
            return False
    
    def validate_xlsx_structure(self, file_path: str) -> Tuple[bool, str]:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É XLSX —Ñ–∞–π–ª–∞"""
        try:
            if not file_path.lower().endswith('.xlsx'):
                return False, "–§–∞–π–ª –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ .xlsx"
            
            # –ò—â–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–π –ª–∏—Å—Ç
            sheet_name, found = self._find_schedule_sheet(file_path)
            if not found:
                return False, "–ù–µ –Ω–∞–π–¥–µ–Ω –ª–∏—Å—Ç —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"
            
            # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
            df = pd.read_excel(file_path, sheet_name=sheet_name, engine='openpyxl')
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏
            required_columns = ['–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ', '–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å', '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–°—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä–≥', '–ü—è—Ç–Ω–∏—Ü–∞', '–°—É–±–±–æ—Ç–∞', '–ö–∞–±–∏–Ω–µ—Ç']
            
            missing_columns = [col for col in required_columns if col not in df.columns]
            if missing_columns:
                return False, f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏: {', '.join(missing_columns)}"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ
            if df.empty:
                return False, "–§–∞–π–ª –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã—Ö"
            
            if df['–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ'].isna().all():
                return False, "–ö–æ–ª–æ–Ω–∫–∞ '–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ' –ø—É—Å—Ç–∞"
            
            return True, f"–§–∞–π–ª –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π, –Ω–∞–π–¥–µ–Ω –ª–∏—Å—Ç: {sheet_name}"
            
        except Exception as e:
            return False, f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–∞–π–ª–∞: {str(e)}"
    
    def get_directions(self) -> List[str]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π"""
        if self.schedule_data is None:
            return []
        return self.schedule_data['–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ'].tolist()
    
    def get_direction_info(self, direction: str) -> Dict:
        """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏"""
        if self.schedule_data is None:
            return {}
        
        row = self.schedule_data[self.schedule_data['–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ'] == direction]
        if row.empty:
            return {}
        
        row = row.iloc[0]
        
        info = {
            '–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ': row['–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ'],
            '–ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å': row['–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å'],
            '–∫–∞–±–∏–Ω–µ—Ç': row['–ö–∞–±–∏–Ω–µ—Ç'],
            '–¥–Ω–∏': {}
        }
        
        # –î–Ω–∏ –Ω–µ–¥–µ–ª–∏ –≤ —Ç–æ–º –ø–æ—Ä—è–¥–∫–µ, –∫–∞–∫ –≤ —Ç–∞–±–ª–∏—Ü–µ
        days = ['–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–°—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä–≥', '–ü—è—Ç–Ω–∏—Ü–∞', '–°—É–±–±–æ—Ç–∞']
        
        for day in days:
            if day in row and pd.notna(row[day]) and str(row[day]).strip():
                # –ü–∞—Ä—Å–∏–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –¥–Ω—è
                schedule_text = str(row[day]).strip()
                info['–¥–Ω–∏'][day] = self._parse_day_schedule(schedule_text)
        
        return info
    
    def _parse_day_schedule(self, schedule_text: str) -> List[str]:
        """–ü–∞—Ä—Å–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –¥–Ω—è"""
        if not schedule_text:
            return []
        
        # –†–∞–∑–¥–µ–ª—è–µ–º –ø–æ –≥—Ä—É–ø–ø–∞–º, –µ—Å–ª–∏ –µ—Å—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ
        # –ò—â–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã —Ç–∏–ø–∞ "1–≥—Ä 14:00 - 14:45"
        groups = []
        
        # –ü—Ä–æ—Å—Ç–æ–µ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –ø–æ –ø—Ä–æ–±–µ–ª–∞–º –∏ –ø–æ–∏—Å–∫ –≥—Ä—É–ø–ø
        parts = schedule_text.split()
        current_group = []
        
        for part in parts:
            if '–≥—Ä' in part:
                if current_group:
                    groups.append(' '.join(current_group))
                current_group = [part]
            else:
                current_group.append(part)
        
        if current_group:
            groups.append(' '.join(current_group))
        
        return groups if groups else [schedule_text]
    
    def get_days_for_direction(self, direction: str) -> List[str]:
        """–ü–æ–ª—É—á–∏—Ç—å –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏ –¥–ª—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
        info = self.get_direction_info(direction)
        return list(info.get('–¥–Ω–∏', {}).keys())
    
    def format_direction_schedule(self, direction: str) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        info = self.get_direction_info(direction)
        
        if not info:
            return "–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
        
        text = f"üìö *{info['–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ']}*\n\n"
        text += f"üë®‚Äçüè´ *–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å:* {info['–ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å']}\n"
        text += f"üè¢ *–ö–∞–±–∏–Ω–µ—Ç:* {info['–∫–∞–±–∏–Ω–µ—Ç']}\n\n"
        
        if info['–¥–Ω–∏']:
            text += "*üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ:*\n\n"
            for day, schedule in info['–¥–Ω–∏'].items():
                text += f"*{day}:*\n"
                for group_schedule in schedule:
                    text += f"‚Ä¢ {group_schedule}\n"
                text += "\n"
        else:
            text += "–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –∑–∞–Ω—è—Ç–∏–π –Ω–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ"
        
        return text
    
    def get_statistics(self) -> Dict:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é"""
        if self.schedule_data is None:
            return {}
        
        stats = {
            'total_directions': len(self.schedule_data),
            'total_teachers': self.schedule_data['–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å'].nunique(),
            'total_cabinets': self.schedule_data['–ö–∞–±–∏–Ω–µ—Ç'].nunique(),
            'days_with_lessons': {}
        }
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–Ω–∏ —Å –∑–∞–Ω—è—Ç–∏—è–º–∏
        days = ['–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–°—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä–≥', '–ü—è—Ç–Ω–∏—Ü–∞', '–°—É–±–±–æ—Ç–∞']
        for day in days:
            if day in self.schedule_data.columns:
                day_lessons = self.schedule_data[day].notna().sum()
                stats['days_with_lessons'][day] = day_lessons
        
        return stats

# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –ø–∞—Ä—Å–µ—Ä–∞
schedule_parser = ScheduleParser()



